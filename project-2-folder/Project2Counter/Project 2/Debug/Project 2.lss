
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb3  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3a  00000000  00000000  00000fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000459  00000000  00000000  00001a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ea  00000000  00000000  000024b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000026a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  70:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  7c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  80:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  84:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  8c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  90:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  94:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  98:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  9c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  ac:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  bc:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a2 30       	cpi	r26, 0x02	; 2
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  ec:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <overflow_sound>:
		sound_delay();
	}
	
	//makes a sound
	//while(1){
	for(int i = 0; i < 100; i++){
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
	button_delay();
	return;
}

void overflow_sound(){
	for(int repeats = 40000; repeats > 0; repeats--){
  f8:	11 c0       	rjmp	.+34     	; 0x11c <overflow_sound+0x28>
	
	//makes a sound
	//while(1){
	for(int i = 0; i < 100; i++){
		for(int repeats = 200000; repeats > 0; repeats--){
			if(repeats == 2000){
  fa:	80 3d       	cpi	r24, 0xD0	; 208
  fc:	47 e0       	ldi	r20, 0x07	; 7
  fe:	94 07       	cpc	r25, r20
 100:	21 f4       	brne	.+8      	; 0x10a <overflow_sound+0x16>
				PORTE ^= 0b00010000;
 102:	5e b1       	in	r21, 0x0e	; 14
 104:	40 e1       	ldi	r20, 0x10	; 16
 106:	45 27       	eor	r20, r21
 108:	4e b9       	out	0x0e, r20	; 14
	}
	
	//makes a sound
	//while(1){
	for(int i = 0; i < 100; i++){
		for(int repeats = 200000; repeats > 0; repeats--){
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	02 c0       	rjmp	.+4      	; 0x112 <overflow_sound+0x1e>
 10e:	80 e4       	ldi	r24, 0x40	; 64
 110:	9d e0       	ldi	r25, 0x0D	; 13
 112:	18 16       	cp	r1, r24
 114:	19 06       	cpc	r1, r25
 116:	8c f3       	brlt	.-30     	; 0xfa <overflow_sound+0x6>
		sound_delay();
	}
	
	//makes a sound
	//while(1){
	for(int i = 0; i < 100; i++){
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	24 36       	cpi	r18, 0x64	; 100
 11e:	31 05       	cpc	r19, r1
 120:	b4 f3       	brlt	.-20     	; 0x10e <overflow_sound+0x1a>
			}
		}
	}
	//}
	return;
}
 122:	08 95       	ret

00000124 <inc_count>:
		PORTD = count ^ 0xFF; // Output complement of counter to LED's
    }
}

void inc_count(){
	count += 1;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(count > 30){
 136:	4f 97       	sbiw	r24, 0x1f	; 31
 138:	34 f0       	brlt	.+12     	; 0x146 <inc_count+0x22>
		count = 0;
 13a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		overflow_sound();
 142:	0e 94 7a 00 	call	0xf4	; 0xf4 <overflow_sound>
 146:	08 95       	ret

00000148 <dec_count>:
	button_delay();
	return;
}

void dec_count(){
	count -= 1;
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(count < 0){
 15a:	99 23       	and	r25, r25
 15c:	44 f4       	brge	.+16     	; 0x16e <dec_count+0x26>
		count = 30;
 15e:	8e e1       	ldi	r24, 0x1E	; 30
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		overflow_sound();
 16a:	0e 94 7a 00 	call	0xf4	; 0xf4 <overflow_sound>
 16e:	08 95       	ret

00000170 <main>:

int count;

int main(void)
{
	count = 0;
 170:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	int previous_buttons_pressed = 0b11111111; // Set previous buttons to not pressed
	int current_buttons_pressed = 0b11111111; // Set current buttons to not pressed

	DDRA = 0x00; // Configure all PA bits to receive input from buttons
 178:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Enable pull-up for PA
 17a:	9f ef       	ldi	r25, 0xFF	; 255
 17c:	92 b9       	out	0x02, r25	; 2
	DDRE |= 0b00010000; // Set PE4 to send output to speaker
 17e:	8d b1       	in	r24, 0x0d	; 13
 180:	80 61       	ori	r24, 0x10	; 16
 182:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11101111; // Clear PE4
 184:	8e b1       	in	r24, 0x0e	; 14
 186:	8f 7e       	andi	r24, 0xEF	; 239
 188:	8e b9       	out	0x0e, r24	; 14
	DDRD = 0xFF; // Configure all PD bits to send output to LED's
 18a:	9a b9       	out	0x0a, r25	; 10
int count;

int main(void)
{
	count = 0;
	int previous_buttons_pressed = 0b11111111; // Set previous buttons to not pressed
 18c:	ee 24       	eor	r14, r14
 18e:	ea 94       	dec	r14
 190:	f1 2c       	mov	r15, r1
	PORTE &= 0b11101111; // Clear PE4
	DDRD = 0xFF; // Configure all PD bits to send output to LED's

    while (1)
    {
		current_buttons_pressed = PINA; // Get current button pressed values
 192:	00 b1       	in	r16, 0x00	; 0
 194:	10 e0       	ldi	r17, 0x00	; 0
		for(int button_index = 0; button_index < 8; button_index++){
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	21 c0       	rjmp	.+66     	; 0x1de <main+0x6e>
			bool previous_button_pressed = !((previous_buttons_pressed >> button_index) & 0b00000001); // Set to true if was pressed, false if was not pressed
			bool current_button_pressed = !((current_buttons_pressed >> button_index) & 0b00000001); // Set to true if pressed, false if not pressed
 19c:	c8 01       	movw	r24, r16
 19e:	0c 2e       	mov	r0, r28
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <main+0x36>
 1a2:	95 95       	asr	r25
 1a4:	87 95       	ror	r24
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <main+0x32>
 1aa:	9c 01       	movw	r18, r24
 1ac:	21 70       	andi	r18, 0x01	; 1
 1ae:	33 27       	eor	r19, r19
			if(previous_button_pressed && !current_button_pressed){
 1b0:	c7 01       	movw	r24, r14
 1b2:	0c 2e       	mov	r0, r28
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <main+0x4a>
 1b6:	95 95       	asr	r25
 1b8:	87 95       	ror	r24
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <main+0x46>
 1be:	80 fd       	sbrc	r24, 0
 1c0:	0d c0       	rjmp	.+26     	; 0x1dc <main+0x6c>
 1c2:	23 2b       	or	r18, r19
 1c4:	59 f0       	breq	.+22     	; 0x1dc <main+0x6c>
				switch(button_index){
 1c6:	20 97       	sbiw	r28, 0x00	; 0
 1c8:	21 f0       	breq	.+8      	; 0x1d2 <main+0x62>
 1ca:	c1 30       	cpi	r28, 0x01	; 1
 1cc:	d1 05       	cpc	r29, r1
 1ce:	21 f0       	breq	.+8      	; 0x1d8 <main+0x68>
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <main+0x6c>
					case 0: 
						inc_count();
 1d2:	0e 94 92 00 	call	0x124	; 0x124 <inc_count>
						break;
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <main+0x6c>
					case 1:
						dec_count();
 1d8:	0e 94 a4 00 	call	0x148	; 0x148 <dec_count>
	DDRD = 0xFF; // Configure all PD bits to send output to LED's

    while (1)
    {
		current_buttons_pressed = PINA; // Get current button pressed values
		for(int button_index = 0; button_index < 8; button_index++){
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	c8 30       	cpi	r28, 0x08	; 8
 1e0:	d1 05       	cpc	r29, r1
 1e2:	e4 f2       	brlt	.-72     	; 0x19c <main+0x2c>
						break;
				}
			}
		}
		previous_buttons_pressed = current_buttons_pressed;
		PORTD = count ^ 0xFF; // Output complement of counter to LED's
 1e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e8:	80 95       	com	r24
 1ea:	8b b9       	out	0x0b, r24	; 11
						dec_count();
						break;
				}
			}
		}
		previous_buttons_pressed = current_buttons_pressed;
 1ec:	78 01       	movw	r14, r16
		PORTD = count ^ 0xFF; // Output complement of counter to LED's
    }
 1ee:	d1 cf       	rjmp	.-94     	; 0x192 <main+0x22>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
