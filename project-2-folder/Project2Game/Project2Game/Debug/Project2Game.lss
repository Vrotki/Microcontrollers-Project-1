
Project2Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000026c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be0  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3c  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000428  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057f  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012a  00000000  00000000  00002433  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000255d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_13>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  68:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  70:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  7c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  80:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  84:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  88:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  8c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  90:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  94:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  98:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  9c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  ac:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  bc:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ec e6       	ldi	r30, 0x6C	; 108
  e0:	f2 e0       	ldi	r31, 0x02	; 2
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 30       	cpi	r26, 0x06	; 6
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>
  ee:	0e 94 19 01 	call	0x232	; 0x232 <main>
  f2:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <__vector_13>:
void timer1_start(){
	TCCR1B |= (1 << CS12);
}

void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 10c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 110:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sec>
 114:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sec+0x1>
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <sec+0x1>
 11e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sec>
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <timer_init_ctc>:
 130:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 134:	e1 e8       	ldi	r30, 0x81	; 129
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 61       	ori	r24, 0x18	; 24
 13c:	80 83       	st	Z, r24
 13e:	e4 e8       	ldi	r30, 0x84	; 132
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	91 81       	ldd	r25, Z+1	; 0x01
 146:	91 83       	std	Z+1, r25	; 0x01
 148:	80 83       	st	Z, r24
 14a:	ef e6       	ldi	r30, 0x6F	; 111
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 83       	st	Z, r24
 154:	84 e2       	ldi	r24, 0x24	; 36
 156:	94 ef       	ldi	r25, 0xF4	; 244
 158:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 15c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 160:	08 95       	ret

00000162 <timer1_start>:
 162:	e1 e8       	ldi	r30, 0x81	; 129
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <sound_delay>:
	}
	return;
}

void sound_delay(){
	TCNT0 = 130; //125 * 64 = 8000
 16e:	82 e8       	ldi	r24, 0x82	; 130
 170:	86 bd       	out	0x26, r24	; 38
	TCCR0B = 0b00000011; //64 timer pre-scale
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	85 bd       	out	0x25, r24	; 37
	while(!(TIFR0 << TOV0)){} //waits 8000 machine cycles for 1000 Hz half wave
 176:	85 b3       	in	r24, 0x15	; 21
 178:	88 23       	and	r24, r24
 17a:	e9 f3       	breq	.-6      	; 0x176 <sound_delay+0x8>
	TCCR0B = 0;
 17c:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1 << TOV0);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	85 bb       	out	0x15, r24	; 21
 182:	08 95       	ret

00000184 <sound>:

void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
}

void sound(){
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
	for(int repeats = 0; repeats < 400; repeats++){
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	07 c0       	rjmp	.+14     	; 0x19c <sound+0x18>
		PORTE ^= 0b00010000;
 18e:	9e b1       	in	r25, 0x0e	; 14
 190:	80 e1       	ldi	r24, 0x10	; 16
 192:	89 27       	eor	r24, r25
 194:	8e b9       	out	0x0e, r24	; 14
		sound_delay();
 196:	0e 94 b7 00 	call	0x16e	; 0x16e <sound_delay>
void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
}

void sound(){
	for(int repeats = 0; repeats < 400; repeats++){
 19a:	21 96       	adiw	r28, 0x01	; 1
 19c:	c0 39       	cpi	r28, 0x90	; 144
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	d8 07       	cpc	r29, r24
 1a2:	ac f3       	brlt	.-22     	; 0x18e <sound+0xa>
		PORTE ^= 0b00010000;
		sound_delay();
	}
	return;
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <check_buttons>:
	TCCR0B = 0;
	TIFR0 = (1 << TOV0);
	return;
}

void check_buttons(){
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
	current_buttons_pressed = PINA; // Get current button pressed values
 1ae:	80 b1       	in	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	for(int button_index = 0; button_index < 8; button_index++){
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	2b c0       	rjmp	.+86     	; 0x216 <check_buttons+0x6c>
		bool previous_button_pressed = !((previous_buttons_pressed >> button_index) & 0b00000001); // Set to true if was pressed, false if was not pressed
 1c0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <previous_buttons_pressed>
 1c4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <previous_buttons_pressed+0x1>
 1c8:	0c 2e       	mov	r0, r28
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <check_buttons+0x26>
 1cc:	35 95       	asr	r19
 1ce:	27 95       	ror	r18
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <check_buttons+0x22>
		bool current_button_pressed = !((current_buttons_pressed >> button_index) & 0b00000001); // Set to true if pressed, false if not pressed
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1dc:	0c 2e       	mov	r0, r28
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <check_buttons+0x3a>
 1e0:	95 95       	asr	r25
 1e2:	87 95       	ror	r24
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <check_buttons+0x36>
 1e8:	81 70       	andi	r24, 0x01	; 1
 1ea:	99 27       	eor	r25, r25
		if(previous_button_pressed && !current_button_pressed){
 1ec:	20 fd       	sbrc	r18, 0
 1ee:	12 c0       	rjmp	.+36     	; 0x214 <check_buttons+0x6a>
 1f0:	89 2b       	or	r24, r25
 1f2:	81 f0       	breq	.+32     	; 0x214 <check_buttons+0x6a>
			switch(button_index){
 1f4:	c1 30       	cpi	r28, 0x01	; 1
 1f6:	d1 05       	cpc	r29, r1
 1f8:	41 f0       	breq	.+16     	; 0x20a <check_buttons+0x60>
 1fa:	c4 30       	cpi	r28, 0x04	; 4
 1fc:	d1 05       	cpc	r29, r1
 1fe:	41 f0       	breq	.+16     	; 0x210 <check_buttons+0x66>
 200:	20 97       	sbiw	r28, 0x00	; 0
 202:	41 f4       	brne	.+16     	; 0x214 <check_buttons+0x6a>
				case 0:
				sound();
 204:	0e 94 c2 00 	call	0x184	; 0x184 <sound>
				break;
 208:	05 c0       	rjmp	.+10     	; 0x214 <check_buttons+0x6a>
				case 1:
				sound();
 20a:	0e 94 c2 00 	call	0x184	; 0x184 <sound>
				break;
 20e:	02 c0       	rjmp	.+4      	; 0x214 <check_buttons+0x6a>
				case 4:
				sound();
 210:	0e 94 c2 00 	call	0x184	; 0x184 <sound>
	return;
}

void check_buttons(){
	current_buttons_pressed = PINA; // Get current button pressed values
	for(int button_index = 0; button_index < 8; button_index++){
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	c8 30       	cpi	r28, 0x08	; 8
 218:	d1 05       	cpc	r29, r1
 21a:	94 f2       	brlt	.-92     	; 0x1c0 <check_buttons+0x16>
				sound();
				break;
			}
		}
	}
	previous_buttons_pressed = current_buttons_pressed;
 21c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 220:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 224:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <previous_buttons_pressed+0x1>
 228:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <previous_buttons_pressed>
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <main>:

int main(void)
{
	DDRA = 0x00; // Configure all PA bits to receive input from buttons
 232:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Enable pull-up for PA
 234:	9f ef       	ldi	r25, 0xFF	; 255
 236:	92 b9       	out	0x02, r25	; 2
	
	DDRE |= 0b00010000; // Set PE4 to send output to speaker
 238:	8d b1       	in	r24, 0x0d	; 13
 23a:	80 61       	ori	r24, 0x10	; 16
 23c:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11101111; // Clear PE4
 23e:	8e b1       	in	r24, 0x0e	; 14
 240:	8f 7e       	andi	r24, 0xEF	; 239
 242:	8e b9       	out	0x0e, r24	; 14
	
	DDRD = 0xFF; // Configure all PD bits to send output to LED's
 244:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x00; // Clear PD (LEDs are on)
 246:	1b b8       	out	0x0b, r1	; 11
	
	timer_init_ctc();
 248:	0e 94 98 00 	call	0x130	; 0x130 <timer_init_ctc>
	sei();
 24c:	78 94       	sei
	timer1_start();
 24e:	0e 94 b1 00 	call	0x162	; 0x162 <timer1_start>
	
    while (1) {
		if(sec == 0){	// After 5 Seconds LEDs turn off
 252:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sec>
 256:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sec+0x1>
 25a:	89 2b       	or	r24, r25
 25c:	11 f4       	brne	.+4      	; 0x262 <main+0x30>
			PORTD = 0xFF;	// Set PD (LEDs are off)
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	8b b9       	out	0x0b, r24	; 11
			//sound();
		}
		check_buttons();
 262:	0e 94 d5 00 	call	0x1aa	; 0x1aa <check_buttons>
    }
 266:	f5 cf       	rjmp	.-22     	; 0x252 <main+0x20>

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
