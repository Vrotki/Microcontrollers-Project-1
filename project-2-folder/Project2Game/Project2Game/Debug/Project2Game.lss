
Project2Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000006de  00000772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800106  00800106  00000778  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e70  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa6  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ce  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  0000285c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061d  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035a  00000000  00000000  00003021  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000337b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee ed       	ldi	r30, 0xDE	; 222
  e0:	f6 e0       	ldi	r31, 0x06	; 6
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 30       	cpi	r26, 0x06	; 6
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a6 e0       	ldi	r26, 0x06	; 6
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a2 31       	cpi	r26, 0x12	; 18
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
 102:	0c 94 6d 03 	jmp	0x6da	; 0x6da <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <timer_init_ctc>:
		sec--;
	}
}

void timer_init_ctc(){
	TCCR1A = 0x00;
 10a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= 0x00 | (1 << WGM13) | (1 << WGM12);
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 61       	ori	r24, 0x18	; 24
 116:	80 83       	st	Z, r24
	TCNT1 |= 0x00;
 118:	e4 e8       	ldi	r30, 0x84	; 132
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	91 81       	ldd	r25, Z+1	; 0x01
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 124:	ef e6       	ldi	r30, 0x6F	; 111
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
	OCR1A = 0xF424;				//Pre-Scaler for 1 second intervals
 12e:	84 e2       	ldi	r24, 0x24	; 36
 130:	94 ef       	ldi	r25, 0xF4	; 244
 132:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 136:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 13a:	08 95       	ret

0000013c <timer1_start>:
}

void timer1_start(){
	TCCR1B |= (1 << CS12);
 13c:	e1 e8       	ldi	r30, 0x81	; 129
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <timer1_stop>:
}

void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
 148:	e1 e8       	ldi	r30, 0x81	; 129
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 7f       	andi	r24, 0xF8	; 248
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <incorrect_sound_delay>:
	return;
}

//should delay for 500Hz sound
void incorrect_sound_delay(){
	TCNT0 = 5; // 125 * 64 = 8000, 255 - 250 = 5
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	86 bd       	out	0x26, r24	; 38
	TCCR0B = 0b00000011; // 64 timer pre-scale
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	85 bd       	out	0x25, r24	; 37
	while(!(TIFR0 << TOV0)){} // Waits 8000 machine cycle
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	88 23       	and	r24, r24
 160:	e9 f3       	breq	.-6      	; 0x15c <incorrect_sound_delay+0x8>
	TCCR0B = 0;
 162:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1 << TOV0);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	85 bb       	out	0x15, r24	; 21
 168:	08 95       	ret

0000016a <incorrect_sound>:
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
}


//repeats are 1/2 for 500Hz
void incorrect_sound(){
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
	for(int repeats = 0; repeats < 200; repeats++){
 16e:	c0 e0       	ldi	r28, 0x00	; 0
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	07 c0       	rjmp	.+14     	; 0x182 <incorrect_sound+0x18>
		PORTE ^= 0b00010000;
 174:	9e b1       	in	r25, 0x0e	; 14
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	89 27       	eor	r24, r25
 17a:	8e b9       	out	0x0e, r24	; 14
		incorrect_sound_delay();
 17c:	0e 94 aa 00 	call	0x154	; 0x154 <incorrect_sound_delay>
}


//repeats are 1/2 for 500Hz
void incorrect_sound(){
	for(int repeats = 0; repeats < 200; repeats++){
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	c8 3c       	cpi	r28, 0xC8	; 200
 184:	d1 05       	cpc	r29, r1
 186:	b4 f3       	brlt	.-20     	; 0x174 <incorrect_sound+0xa>
		PORTE ^= 0b00010000;
		incorrect_sound_delay();
	}
	return;
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <sound_delay>:
	}
	return;
}

void sound_delay(){
	TCNT0 = 130; // 125 * 64 = 8000, 255 - 125 = 130
 18e:	82 e8       	ldi	r24, 0x82	; 130
 190:	86 bd       	out	0x26, r24	; 38
	TCCR0B = 0b00000011; // 64 timer pre-scale
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	85 bd       	out	0x25, r24	; 37
	while(!(TIFR0 << TOV0)){} // Waits 8000 machine cycles for 1000 Hz half wave
 196:	85 b3       	in	r24, 0x15	; 21
 198:	88 23       	and	r24, r24
 19a:	e9 f3       	breq	.-6      	; 0x196 <sound_delay+0x8>
	TCCR0B = 0;
 19c:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1 << TOV0);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	08 95       	ret

000001a4 <sound>:
	TCCR0B = 0;
	TIFR0 = (1 << TOV0);
	return;
}

void sound(){
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	for(int repeats = 0; repeats < 400; repeats++){
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <sound+0x18>
		PORTE ^= 0b00010000;
 1ae:	9e b1       	in	r25, 0x0e	; 14
 1b0:	80 e1       	ldi	r24, 0x10	; 16
 1b2:	89 27       	eor	r24, r25
 1b4:	8e b9       	out	0x0e, r24	; 14
		sound_delay();
 1b6:	0e 94 c7 00 	call	0x18e	; 0x18e <sound_delay>
	TIFR0 = (1 << TOV0);
	return;
}

void sound(){
	for(int repeats = 0; repeats < 400; repeats++){
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	c0 39       	cpi	r28, 0x90	; 144
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	d8 07       	cpc	r29, r24
 1c2:	ac f3       	brlt	.-22     	; 0x1ae <sound+0xa>
		PORTE ^= 0b00010000;
		sound_delay();
	}
	return;
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <new_highscore_sound>:

void new_highscore_sound() {
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29

	for(int repeats = 0; repeats < 3000; repeats++){
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
 1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <new_highscore_sound+0x18>
		PORTE ^= 0b00010000;
 1d4:	9e b1       	in	r25, 0x0e	; 14
 1d6:	80 e1       	ldi	r24, 0x10	; 16
 1d8:	89 27       	eor	r24, r25
 1da:	8e b9       	out	0x0e, r24	; 14
		sound_delay();
 1dc:	0e 94 c7 00 	call	0x18e	; 0x18e <sound_delay>
	return;
}

void new_highscore_sound() {

	for(int repeats = 0; repeats < 3000; repeats++){
 1e0:	21 96       	adiw	r28, 0x01	; 1
 1e2:	c8 3b       	cpi	r28, 0xB8	; 184
 1e4:	8b e0       	ldi	r24, 0x0B	; 11
 1e6:	d8 07       	cpc	r29, r24
 1e8:	ac f3       	brlt	.-22     	; 0x1d4 <new_highscore_sound+0xa>
		PORTE ^= 0b00010000;
		sound_delay();
	}
	return;

}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <streak_sound>:

void streak_sound(){
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
	for(int repeats = 0; repeats < 50; repeats++){
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <streak_sound+0x18>
		PORTE ^= 0b00010000;
 1fa:	9e b1       	in	r25, 0x0e	; 14
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	89 27       	eor	r24, r25
 200:	8e b9       	out	0x0e, r24	; 14
		sound_delay();
 202:	0e 94 c7 00 	call	0x18e	; 0x18e <sound_delay>
	return;

}

void streak_sound(){
	for(int repeats = 0; repeats < 50; repeats++){
 206:	21 96       	adiw	r28, 0x01	; 1
 208:	c2 33       	cpi	r28, 0x32	; 50
 20a:	d1 05       	cpc	r29, r1
 20c:	b4 f3       	brlt	.-20     	; 0x1fa <streak_sound+0xa>
		PORTE ^= 0b00010000;
		sound_delay();
	}
	return;
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <randomLED>:
	TIFR0 = (1 << TOV0);
	return;
}

int randomLED() {
	int randomNum = led;
 214:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <led>
 218:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <led+0x1>
	while(randomNum == led){ // If last LED was not scored, LED should be distinct from the previous LED
 21c:	0b c0       	rjmp	.+22     	; 0x234 <randomLED+0x20>
							 // At start of game, led == 0, preventing pressing the start button from giving a point
							 // If an LED is scored, it turns off and led is set to -1, so it is allowed to be the next LED
		randomNum = rand() % 6;  // Generate a random number between 0 and 5
 21e:	0e 94 3b 03 	call	0x676	; 0x676 <rand>
 222:	66 e0       	ldi	r22, 0x06	; 6
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	0e 94 86 02 	call	0x50c	; 0x50c <__divmodhi4>
 22a:	9c 01       	movw	r18, r24
		// 0, 1, 2, 5, 6, and 7 correspond to LED's that have corresponding buttons - should only return these numbers
		// Can achieve by generating number from 0 to 5 and adding 2 to any results >= 3
		if(randomNum >= 3) randomNum += 2;
 22c:	03 97       	sbiw	r24, 0x03	; 3
 22e:	14 f0       	brlt	.+4      	; 0x234 <randomLED+0x20>
 230:	2e 5f       	subi	r18, 0xFE	; 254
 232:	3f 4f       	sbci	r19, 0xFF	; 255
	return;
}

int randomLED() {
	int randomNum = led;
	while(randomNum == led){ // If last LED was not scored, LED should be distinct from the previous LED
 234:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <led>
 238:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <led+0x1>
 23c:	28 17       	cp	r18, r24
 23e:	39 07       	cpc	r19, r25
 240:	71 f3       	breq	.-36     	; 0x21e <randomLED+0xa>
		// 0, 1, 2, 5, 6, and 7 correspond to LED's that have corresponding buttons - should only return these numbers
		// Can achieve by generating number from 0 to 5 and adding 2 to any results >= 3
		if(randomNum >= 3) randomNum += 2;
	}
	return randomNum;
}
 242:	c9 01       	movw	r24, r18
 244:	08 95       	ret

00000246 <__vector_13>:

bool startup = true;
bool game = false;
bool gameover = false;

ISR(TIMER1_COMPA_vect){	// Every Second the Interrupt Service Routine will be performed
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	TCNT1 = 0x00;
 268:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 26c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	if(game){
 270:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <game>
 274:	88 23       	and	r24, r24
 276:	21 f1       	breq	.+72     	; 0x2c0 <__vector_13+0x7a>
		if(led != -1){
 278:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <led>
 27c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <led+0x1>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	21 f0       	breq	.+8      	; 0x28c <__vector_13+0x46>
			streak = 0;
 284:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <streak+0x1>
 288:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <streak>
		}
		led = randomLED();
 28c:	0e 94 0a 01 	call	0x214	; 0x214 <randomLED>
 290:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <led>
 294:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <led+0x1>
		PORTD = 0xFF ^ (1 << led); // Turn on the corresponding LED       
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	a9 01       	movw	r20, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__vector_13+0x5e>
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	8a 95       	dec	r24
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <__vector_13+0x5a>
 2a8:	ca 01       	movw	r24, r20
 2aa:	80 95       	com	r24
 2ac:	8b b9       	out	0x0b, r24	; 11
		sec--;
 2ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec>
 2b2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec+0x1>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <sec+0x1>
 2bc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <sec>
	}
}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <start_up>:
		if(randomNum >= 3) randomNum += 2;
	}
	return randomNum;
}

void start_up(){
 2e2:	cf 92       	push	r12
 2e4:	df 92       	push	r13
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
	startup = true;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <startup>
	int rand_seed = 0;
 2f4:	c0 e0       	ldi	r28, 0x00	; 0
 2f6:	d0 e0       	ldi	r29, 0x00	; 0
	
	
	while(startup){
 2f8:	33 c0       	rjmp	.+102    	; 0x360 <start_up+0x7e>
		rand_seed++;
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
		rand_seed %= 100000; // Random seed will be a pseudo-random number from 0-99999 based on how many loops occur before the game starts
 300:	07 2e       	mov	r0, r23
 302:	00 0c       	add	r0, r0
 304:	88 0b       	sbc	r24, r24
 306:	99 0b       	sbc	r25, r25
 308:	20 ea       	ldi	r18, 0xA0	; 160
 30a:	36 e8       	ldi	r19, 0x86	; 134
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	0e 94 9a 02 	call	0x534	; 0x534 <__divmodsi4>
 314:	6b 01       	movw	r12, r22
 316:	7c 01       	movw	r14, r24
 318:	eb 01       	movw	r28, r22

		//if user presses button for highscore
		if(~PINE & (1<<PINE6)){
 31a:	66 99       	sbic	0x0c, 6	; 12
 31c:	04 c0       	rjmp	.+8      	; 0x326 <start_up+0x44>
			PORTD = highscore ^ 0xFF; //display highscore
 31e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <highscore>
 322:	80 95       	com	r24
 324:	8b b9       	out	0x0b, r24	; 11
		}

		if(~PINA & (1<<PINA0)){			// If SW1 is pressed, start the game
 326:	00 99       	sbic	0x00, 0	; 0
 328:	1b c0       	rjmp	.+54     	; 0x360 <start_up+0x7e>
		
			sound();
 32a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
			incorrect_sound();
 32e:	0e 94 b5 00 	call	0x16a	; 0x16a <incorrect_sound>
			sound(); //plays series of tones to start up game
 332:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>

			while(~PINA & (1<<PINA0));
 336:	00 9b       	sbis	0x00, 0	; 0
 338:	fe cf       	rjmp	.-4      	; 0x336 <start_up+0x54>
			srand(rand_seed);
 33a:	c6 01       	movw	r24, r12
 33c:	0e 94 40 03 	call	0x680	; 0x680 <srand>
			sei();
 340:	78 94       	sei
			timer1_start();
 342:	0e 94 9e 00 	call	0x13c	; 0x13c <timer1_start>
			sec = 30;
 346:	8e e1       	ldi	r24, 0x1E	; 30
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <sec+0x1>
 34e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <sec>
			PORTD = 0xFF; // Set PD (LEDs are off)
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	8b b9       	out	0x0b, r24	; 11
			startup = false;
 356:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <startup>
			game = true;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <game>
void start_up(){
	startup = true;
	int rand_seed = 0;
	
	
	while(startup){
 360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <startup>
 364:	81 11       	cpse	r24, r1
 366:	c9 cf       	rjmp	.-110    	; 0x2fa <start_up+0x18>
			PORTD = 0xFF; // Set PD (LEDs are off)
			startup = false;
			game = true;
		}
	}
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	08 95       	ret

00000376 <gameplay>:

void gameplay(){
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
	while (game) {
 37a:	81 c0       	rjmp	.+258    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
		if((~PINA & (1<<led)) && (led != -1)){            // If correct button is pressed, score += 1
 37c:	80 b1       	in	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <led>
 388:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <led+0x1>
 38c:	04 2e       	mov	r0, r20
 38e:	02 c0       	rjmp	.+4      	; 0x394 <gameplay+0x1e>
 390:	95 95       	asr	r25
 392:	87 95       	ror	r24
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <gameplay+0x1a>
 398:	80 ff       	sbrs	r24, 0
 39a:	41 c0       	rjmp	.+130    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 39c:	4f 3f       	cpi	r20, 0xFF	; 255
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	58 07       	cpc	r21, r24
 3a2:	e9 f1       	breq	.+122    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			while(~PINA & (1<<led));
 3a4:	80 b1       	in	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	80 95       	com	r24
 3aa:	90 95       	com	r25
 3ac:	04 2e       	mov	r0, r20
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <gameplay+0x3e>
 3b0:	95 95       	asr	r25
 3b2:	87 95       	ror	r24
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <gameplay+0x3a>
 3b8:	80 fd       	sbrc	r24, 0
 3ba:	f4 cf       	rjmp	.-24     	; 0x3a4 <gameplay+0x2e>
			streak += 1;
 3bc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <streak>
 3c0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <streak+0x1>
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <streak+0x1>
 3ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <streak>
			score += 1;
 3ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <score>
 3d2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <score+0x1>
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <score+0x1>
 3dc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <score>
			led = -1; // Prevent further scoring until new LED starts
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	9f ef       	ldi	r25, 0xFF	; 255
 3e4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <led+0x1>
 3e8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <led>
			PORTD = 0xFF; // Set PD (LEDs are off)
 3ec:	8b b9       	out	0x0b, r24	; 11
			if(streak > 4)
 3ee:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <streak>
 3f2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <streak+0x1>
 3f6:	05 97       	sbiw	r24, 0x05	; 5
 3f8:	2c f4       	brge	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fa:	0e c0       	rjmp	.+28     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			{
				for(int i = 0; i < streak; i++)
				{
					streak_sound();
 3fc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <streak_sound>
			score += 1;
			led = -1; // Prevent further scoring until new LED starts
			PORTD = 0xFF; // Set PD (LEDs are off)
			if(streak > 4)
			{
				for(int i = 0; i < streak; i++)
 400:	21 96       	adiw	r28, 0x01	; 1
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	c0 e0       	ldi	r28, 0x00	; 0
 406:	d0 e0       	ldi	r29, 0x00	; 0
 408:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <streak>
 40c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <streak+0x1>
 410:	c8 17       	cp	r28, r24
 412:	d9 07       	cpc	r29, r25
 414:	9c f3       	brlt	.-26     	; 0x3fc <gameplay+0x86>
 416:	1f c0       	rjmp	.+62     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
					streak_sound();
				}
			}
			else
			{
				sound();
 418:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
 41c:	1c c0       	rjmp	.+56     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			}

		}
		else if((PINA | (0b00011000 | (1 << led))) != 0b11111111)//((PINA | 0b00011000) != 0b11111111) // If any incorrect LED button pressed, play incorrect sound
 41e:	80 b1       	in	r24, 0x00	; 0
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	4a 95       	dec	r20
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	28 61       	ori	r18, 0x18	; 24
 430:	a9 01       	movw	r20, r18
 432:	48 2b       	or	r20, r24
 434:	ca 01       	movw	r24, r20
 436:	8f 3f       	cpi	r24, 0xFF	; 255
 438:	91 05       	cpc	r25, r1
 43a:	69 f0       	breq	.+26     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		{
			while((PINA | (0b00011000 | (1 << led))) != 0b11111111);
 43c:	80 b1       	in	r24, 0x00	; 0
 43e:	a9 01       	movw	r20, r18
 440:	48 2b       	or	r20, r24
 442:	ca 01       	movw	r24, r20
 444:	8f 3f       	cpi	r24, 0xFF	; 255
 446:	91 05       	cpc	r25, r1
 448:	c9 f7       	brne	.-14     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			streak = 0;
 44a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <streak+0x1>
 44e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <streak>
			incorrect_sound();
 452:	0e 94 b5 00 	call	0x16a	; 0x16a <incorrect_sound>
		}
		if((~PINA & (1<<PINA3)) ){            // If correct button is pressed, score += 1
 456:	03 99       	sbic	0x00, 3	; 0
 458:	03 c0       	rjmp	.+6      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
			while(~PINA & (1<<PINA3));
 45a:	03 9b       	sbis	0x00, 3	; 0
 45c:	fe cf       	rjmp	.-4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45e:	13 c0       	rjmp	.+38     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
			return;
		}
	    if(sec <= 0){	// After 30 Seconds, game is finished
 460:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec>
 464:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec+0x1>
 468:	18 16       	cp	r1, r24
 46a:	19 06       	cpc	r1, r25
 46c:	44 f0       	brlt	.+16     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
		    PORTD = 0x00;	// Clear PD (LEDs are on)
 46e:	1b b8       	out	0x0b, r1	; 11
		    sound();
 470:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
		    game = false;
 474:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <game>
		    gameover = true;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}
	}
}

void gameplay(){
	while (game) {
 47e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <game>
 482:	81 11       	cpse	r24, r1
 484:	7b cf       	rjmp	.-266    	; 0x37c <gameplay+0x6>
		    sound();
		    game = false;
		    gameover = true;
	    }
	}
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <game_over>:

void game_over(){
	timer1_stop();
 48c:	0e 94 a4 00 	call	0x148	; 0x148 <timer1_stop>
	
	incorrect_sound();
 490:	0e 94 b5 00 	call	0x16a	; 0x16a <incorrect_sound>
	sound();
 494:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
	incorrect_sound(); //plays series of tones to end game
 498:	0e 94 b5 00 	call	0x16a	; 0x16a <incorrect_sound>
	
	PORTD = score ^ 0xFF; // Display score
 49c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <score>
 4a0:	80 95       	com	r24
 4a2:	8b b9       	out	0x0b, r24	; 11
	//if score is higher than high score set highscore to new score
	if (score > highscore)
 4a4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <score>
 4a8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <score+0x1>
 4ac:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <highscore>
 4b0:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <highscore+0x1>
 4b4:	28 17       	cp	r18, r24
 4b6:	39 07       	cpc	r19, r25
 4b8:	34 f4       	brge	.+12     	; 0x4c6 <game_over+0x3a>
	{
		highscore = score;
 4ba:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <highscore+0x1>
 4be:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <highscore>
		new_highscore_sound();
 4c2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <new_highscore_sound>
	}
	score = 0;
 4c6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <score+0x1>
 4ca:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <score>
	led = 0; // Reset LED to default value
 4ce:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <led+0x1>
 4d2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <led>
 4d6:	08 95       	ret

000004d8 <main>:
}

int main(void) {
	DDRA = 0x00; // Configure all PA bits to receive input from buttons
 4d8:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Enable pull-up for PA
 4da:	9f ef       	ldi	r25, 0xFF	; 255
 4dc:	92 b9       	out	0x02, r25	; 2

	DDRE &= ~(1 << PINE6); // Configure PE6 to receive input from SW5
 4de:	8d b1       	in	r24, 0x0d	; 13
 4e0:	8f 7b       	andi	r24, 0xBF	; 191
 4e2:	8d b9       	out	0x0d, r24	; 13
	PORTE |= (1 << PORTE6); // Enable pull-up for PE6
 4e4:	8e b1       	in	r24, 0x0e	; 14
 4e6:	80 64       	ori	r24, 0x40	; 64
 4e8:	8e b9       	out	0x0e, r24	; 14
	
	DDRE |= 0b00010000; // Set PE4 to send output to speaker
 4ea:	8d b1       	in	r24, 0x0d	; 13
 4ec:	80 61       	ori	r24, 0x10	; 16
 4ee:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11101111; // Clear PE4
 4f0:	8e b1       	in	r24, 0x0e	; 14
 4f2:	8f 7e       	andi	r24, 0xEF	; 239
 4f4:	8e b9       	out	0x0e, r24	; 14
	
	DDRD = 0xFF; // Configure all PD bits to send output to LED's
 4f6:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x00; // Clear PD (LEDs are on)
 4f8:	1b b8       	out	0x0b, r1	; 11

	timer_init_ctc();
 4fa:	0e 94 85 00 	call	0x10a	; 0x10a <timer_init_ctc>
	
	while(1){
		start_up();
 4fe:	0e 94 71 01 	call	0x2e2	; 0x2e2 <start_up>
		gameplay();
 502:	0e 94 bb 01 	call	0x376	; 0x376 <gameplay>
		game_over();
 506:	0e 94 46 02 	call	0x48c	; 0x48c <game_over>
 50a:	f9 cf       	rjmp	.-14     	; 0x4fe <main+0x26>

0000050c <__divmodhi4>:
 50c:	97 fb       	bst	r25, 7
 50e:	07 2e       	mov	r0, r23
 510:	16 f4       	brtc	.+4      	; 0x516 <__divmodhi4+0xa>
 512:	00 94       	com	r0
 514:	07 d0       	rcall	.+14     	; 0x524 <__divmodhi4_neg1>
 516:	77 fd       	sbrc	r23, 7
 518:	09 d0       	rcall	.+18     	; 0x52c <__divmodhi4_neg2>
 51a:	0e 94 b9 02 	call	0x572	; 0x572 <__udivmodhi4>
 51e:	07 fc       	sbrc	r0, 7
 520:	05 d0       	rcall	.+10     	; 0x52c <__divmodhi4_neg2>
 522:	3e f4       	brtc	.+14     	; 0x532 <__divmodhi4_exit>

00000524 <__divmodhi4_neg1>:
 524:	90 95       	com	r25
 526:	81 95       	neg	r24
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	08 95       	ret

0000052c <__divmodhi4_neg2>:
 52c:	70 95       	com	r23
 52e:	61 95       	neg	r22
 530:	7f 4f       	sbci	r23, 0xFF	; 255

00000532 <__divmodhi4_exit>:
 532:	08 95       	ret

00000534 <__divmodsi4>:
 534:	05 2e       	mov	r0, r21
 536:	97 fb       	bst	r25, 7
 538:	1e f4       	brtc	.+6      	; 0x540 <__divmodsi4+0xc>
 53a:	00 94       	com	r0
 53c:	0e 94 b1 02 	call	0x562	; 0x562 <__negsi2>
 540:	57 fd       	sbrc	r21, 7
 542:	07 d0       	rcall	.+14     	; 0x552 <__divmodsi4_neg2>
 544:	0e 94 cd 02 	call	0x59a	; 0x59a <__udivmodsi4>
 548:	07 fc       	sbrc	r0, 7
 54a:	03 d0       	rcall	.+6      	; 0x552 <__divmodsi4_neg2>
 54c:	4e f4       	brtc	.+18     	; 0x560 <__divmodsi4_exit>
 54e:	0c 94 b1 02 	jmp	0x562	; 0x562 <__negsi2>

00000552 <__divmodsi4_neg2>:
 552:	50 95       	com	r21
 554:	40 95       	com	r20
 556:	30 95       	com	r19
 558:	21 95       	neg	r18
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	4f 4f       	sbci	r20, 0xFF	; 255
 55e:	5f 4f       	sbci	r21, 0xFF	; 255

00000560 <__divmodsi4_exit>:
 560:	08 95       	ret

00000562 <__negsi2>:
 562:	90 95       	com	r25
 564:	80 95       	com	r24
 566:	70 95       	com	r23
 568:	61 95       	neg	r22
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	8f 4f       	sbci	r24, 0xFF	; 255
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	08 95       	ret

00000572 <__udivmodhi4>:
 572:	aa 1b       	sub	r26, r26
 574:	bb 1b       	sub	r27, r27
 576:	51 e1       	ldi	r21, 0x11	; 17
 578:	07 c0       	rjmp	.+14     	; 0x588 <__udivmodhi4_ep>

0000057a <__udivmodhi4_loop>:
 57a:	aa 1f       	adc	r26, r26
 57c:	bb 1f       	adc	r27, r27
 57e:	a6 17       	cp	r26, r22
 580:	b7 07       	cpc	r27, r23
 582:	10 f0       	brcs	.+4      	; 0x588 <__udivmodhi4_ep>
 584:	a6 1b       	sub	r26, r22
 586:	b7 0b       	sbc	r27, r23

00000588 <__udivmodhi4_ep>:
 588:	88 1f       	adc	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	5a 95       	dec	r21
 58e:	a9 f7       	brne	.-22     	; 0x57a <__udivmodhi4_loop>
 590:	80 95       	com	r24
 592:	90 95       	com	r25
 594:	bc 01       	movw	r22, r24
 596:	cd 01       	movw	r24, r26
 598:	08 95       	ret

0000059a <__udivmodsi4>:
 59a:	a1 e2       	ldi	r26, 0x21	; 33
 59c:	1a 2e       	mov	r1, r26
 59e:	aa 1b       	sub	r26, r26
 5a0:	bb 1b       	sub	r27, r27
 5a2:	fd 01       	movw	r30, r26
 5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <__udivmodsi4_ep>

000005a6 <__udivmodsi4_loop>:
 5a6:	aa 1f       	adc	r26, r26
 5a8:	bb 1f       	adc	r27, r27
 5aa:	ee 1f       	adc	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	a2 17       	cp	r26, r18
 5b0:	b3 07       	cpc	r27, r19
 5b2:	e4 07       	cpc	r30, r20
 5b4:	f5 07       	cpc	r31, r21
 5b6:	20 f0       	brcs	.+8      	; 0x5c0 <__udivmodsi4_ep>
 5b8:	a2 1b       	sub	r26, r18
 5ba:	b3 0b       	sbc	r27, r19
 5bc:	e4 0b       	sbc	r30, r20
 5be:	f5 0b       	sbc	r31, r21

000005c0 <__udivmodsi4_ep>:
 5c0:	66 1f       	adc	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	88 1f       	adc	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	1a 94       	dec	r1
 5ca:	69 f7       	brne	.-38     	; 0x5a6 <__udivmodsi4_loop>
 5cc:	60 95       	com	r22
 5ce:	70 95       	com	r23
 5d0:	80 95       	com	r24
 5d2:	90 95       	com	r25
 5d4:	9b 01       	movw	r18, r22
 5d6:	ac 01       	movw	r20, r24
 5d8:	bd 01       	movw	r22, r26
 5da:	cf 01       	movw	r24, r30
 5dc:	08 95       	ret

000005de <do_rand>:
 5de:	8f 92       	push	r8
 5e0:	9f 92       	push	r9
 5e2:	af 92       	push	r10
 5e4:	bf 92       	push	r11
 5e6:	cf 92       	push	r12
 5e8:	df 92       	push	r13
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	ec 01       	movw	r28, r24
 5f4:	68 81       	ld	r22, Y
 5f6:	79 81       	ldd	r23, Y+1	; 0x01
 5f8:	8a 81       	ldd	r24, Y+2	; 0x02
 5fa:	9b 81       	ldd	r25, Y+3	; 0x03
 5fc:	61 15       	cp	r22, r1
 5fe:	71 05       	cpc	r23, r1
 600:	81 05       	cpc	r24, r1
 602:	91 05       	cpc	r25, r1
 604:	21 f4       	brne	.+8      	; 0x60e <do_rand+0x30>
 606:	64 e2       	ldi	r22, 0x24	; 36
 608:	79 ed       	ldi	r23, 0xD9	; 217
 60a:	8b e5       	ldi	r24, 0x5B	; 91
 60c:	97 e0       	ldi	r25, 0x07	; 7
 60e:	2d e1       	ldi	r18, 0x1D	; 29
 610:	33 ef       	ldi	r19, 0xF3	; 243
 612:	41 e0       	ldi	r20, 0x01	; 1
 614:	50 e0       	ldi	r21, 0x00	; 0
 616:	0e 94 9a 02 	call	0x534	; 0x534 <__divmodsi4>
 61a:	49 01       	movw	r8, r18
 61c:	5a 01       	movw	r10, r20
 61e:	9b 01       	movw	r18, r22
 620:	ac 01       	movw	r20, r24
 622:	a7 ea       	ldi	r26, 0xA7	; 167
 624:	b1 e4       	ldi	r27, 0x41	; 65
 626:	0e 94 4b 03 	call	0x696	; 0x696 <__muluhisi3>
 62a:	6b 01       	movw	r12, r22
 62c:	7c 01       	movw	r14, r24
 62e:	ac ee       	ldi	r26, 0xEC	; 236
 630:	b4 ef       	ldi	r27, 0xF4	; 244
 632:	a5 01       	movw	r20, r10
 634:	94 01       	movw	r18, r8
 636:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__mulohisi3>
 63a:	dc 01       	movw	r26, r24
 63c:	cb 01       	movw	r24, r22
 63e:	8c 0d       	add	r24, r12
 640:	9d 1d       	adc	r25, r13
 642:	ae 1d       	adc	r26, r14
 644:	bf 1d       	adc	r27, r15
 646:	b7 ff       	sbrs	r27, 7
 648:	03 c0       	rjmp	.+6      	; 0x650 <do_rand+0x72>
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	a1 09       	sbc	r26, r1
 64e:	b0 48       	sbci	r27, 0x80	; 128
 650:	88 83       	st	Y, r24
 652:	99 83       	std	Y+1, r25	; 0x01
 654:	aa 83       	std	Y+2, r26	; 0x02
 656:	bb 83       	std	Y+3, r27	; 0x03
 658:	9f 77       	andi	r25, 0x7F	; 127
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	ff 90       	pop	r15
 660:	ef 90       	pop	r14
 662:	df 90       	pop	r13
 664:	cf 90       	pop	r12
 666:	bf 90       	pop	r11
 668:	af 90       	pop	r10
 66a:	9f 90       	pop	r9
 66c:	8f 90       	pop	r8
 66e:	08 95       	ret

00000670 <rand_r>:
 670:	0e 94 ef 02 	call	0x5de	; 0x5de <do_rand>
 674:	08 95       	ret

00000676 <rand>:
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	0e 94 ef 02 	call	0x5de	; 0x5de <do_rand>
 67e:	08 95       	ret

00000680 <srand>:
 680:	a0 e0       	ldi	r26, 0x00	; 0
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 688:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 68c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 690:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 694:	08 95       	ret

00000696 <__muluhisi3>:
 696:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__umulhisi3>
 69a:	a5 9f       	mul	r26, r21
 69c:	90 0d       	add	r25, r0
 69e:	b4 9f       	mul	r27, r20
 6a0:	90 0d       	add	r25, r0
 6a2:	a4 9f       	mul	r26, r20
 6a4:	80 0d       	add	r24, r0
 6a6:	91 1d       	adc	r25, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	08 95       	ret

000006ac <__mulshisi3>:
 6ac:	b7 ff       	sbrs	r27, 7
 6ae:	0c 94 4b 03 	jmp	0x696	; 0x696 <__muluhisi3>

000006b2 <__mulohisi3>:
 6b2:	0e 94 4b 03 	call	0x696	; 0x696 <__muluhisi3>
 6b6:	82 1b       	sub	r24, r18
 6b8:	93 0b       	sbc	r25, r19
 6ba:	08 95       	ret

000006bc <__umulhisi3>:
 6bc:	a2 9f       	mul	r26, r18
 6be:	b0 01       	movw	r22, r0
 6c0:	b3 9f       	mul	r27, r19
 6c2:	c0 01       	movw	r24, r0
 6c4:	a3 9f       	mul	r26, r19
 6c6:	70 0d       	add	r23, r0
 6c8:	81 1d       	adc	r24, r1
 6ca:	11 24       	eor	r1, r1
 6cc:	91 1d       	adc	r25, r1
 6ce:	b2 9f       	mul	r27, r18
 6d0:	70 0d       	add	r23, r0
 6d2:	81 1d       	adc	r24, r1
 6d4:	11 24       	eor	r1, r1
 6d6:	91 1d       	adc	r25, r1
 6d8:	08 95       	ret

000006da <_exit>:
 6da:	f8 94       	cli

000006dc <__stop_program>:
 6dc:	ff cf       	rjmp	.-2      	; 0x6dc <__stop_program>
