
Project2Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  000003f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3d  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6e  00000000  00000000  00001219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052a  00000000  00000000  00001c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000021b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000671  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bb  00000000  00000000  0000292d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e6 e5       	ldi	r30, 0x56	; 86
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	aa 30       	cpi	r26, 0x0A	; 10
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	aa e0       	ldi	r26, 0x0A	; 10
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	af 30       	cpi	r26, 0x0F	; 15
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
 102:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <__vector_13>:
void timer1_start(){
	TCCR1B |= (1 << CS12);
}

void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 11c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 120:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 124:	88 23       	and	r24, r24
 126:	49 f0       	breq	.+18     	; 0x13a <__vector_13+0x30>
 128:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <sec>
 12c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <sec+0x1>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <sec+0x1>
 136:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <sec>
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <timer_init_ctc>:
 148:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 14c:	e1 e8       	ldi	r30, 0x81	; 129
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 61       	ori	r24, 0x18	; 24
 154:	80 83       	st	Z, r24
 156:	e4 e8       	ldi	r30, 0x84	; 132
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	91 81       	ldd	r25, Z+1	; 0x01
 15e:	91 83       	std	Z+1, r25	; 0x01
 160:	80 83       	st	Z, r24
 162:	ef e6       	ldi	r30, 0x6F	; 111
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
 16c:	84 e2       	ldi	r24, 0x24	; 36
 16e:	94 ef       	ldi	r25, 0xF4	; 244
 170:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 174:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 178:	08 95       	ret

0000017a <timer1_start>:
 17a:	e1 e8       	ldi	r30, 0x81	; 129
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	84 60       	ori	r24, 0x04	; 4
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <sound_delay>:
	}
	return;
}

void sound_delay(){
	TCNT0 = 130; // 125 * 64 = 8000
 186:	82 e8       	ldi	r24, 0x82	; 130
 188:	86 bd       	out	0x26, r24	; 38
	TCCR0B = 0b00000011; // 64 timer pre-scale
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	85 bd       	out	0x25, r24	; 37
	while(!(TIFR0 << TOV0)){} // Waits 8000 machine cycles for 1000 Hz half wave
 18e:	85 b3       	in	r24, 0x15	; 21
 190:	88 23       	and	r24, r24
 192:	e9 f3       	breq	.-6      	; 0x18e <sound_delay+0x8>
	TCCR0B = 0;
 194:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1 << TOV0);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	85 bb       	out	0x15, r24	; 21
 19a:	08 95       	ret

0000019c <sound>:

void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
}

void sound(){
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
	for(int repeats = 0; repeats < 400; repeats++){
 1a0:	c0 e0       	ldi	r28, 0x00	; 0
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <sound+0x18>
		PORTE ^= 0b00010000;
 1a6:	9e b1       	in	r25, 0x0e	; 14
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	89 27       	eor	r24, r25
 1ac:	8e b9       	out	0x0e, r24	; 14
		sound_delay();
 1ae:	0e 94 c3 00 	call	0x186	; 0x186 <sound_delay>
void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
}

void sound(){
	for(int repeats = 0; repeats < 400; repeats++){
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	c0 39       	cpi	r28, 0x90	; 144
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	d8 07       	cpc	r29, r24
 1ba:	ac f3       	brlt	.-22     	; 0x1a6 <sound+0xa>
		PORTE ^= 0b00010000;
		sound_delay();
	}
	return;
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <start_game>:
	}
	previous_E_buttons_pressed = current_E_buttons_pressed;
}

void start_game(){ // If SW1 is pressed during start mode, start the game
	sec = 5;
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <sec+0x1>
 1ca:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <sec>
	PORTD = 0xFF; // Set PD (LEDs are off)
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	8b b9       	out	0x0b, r24	; 11
	startup = false;
 1d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	game = true;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1dc:	08 95       	ret

000001de <check_buttons>:
	TCCR0B = 0;
	TIFR0 = (1 << TOV0);
	return;
}

void check_buttons(){
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
	current_buttons_pressed = PINA; // Get current button pressed values
 1e6:	80 b1       	in	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <current_buttons_pressed+0x1>
 1ee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <current_buttons_pressed>
	for(int button_index = 0; button_index < 8; button_index++){
 1f2:	c0 e0       	ldi	r28, 0x00	; 0
 1f4:	d0 e0       	ldi	r29, 0x00	; 0
 1f6:	48 c0       	rjmp	.+144    	; 0x288 <check_buttons+0xaa>
		bool previous_button_pressed = !((previous_buttons_pressed >> button_index) & 0b00000001); // Set to true if was pressed, false if was not pressed
 1f8:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <previous_buttons_pressed>
 1fc:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <previous_buttons_pressed+0x1>
 200:	0c 2e       	mov	r0, r28
 202:	02 c0       	rjmp	.+4      	; 0x208 <check_buttons+0x2a>
 204:	35 95       	asr	r19
 206:	27 95       	ror	r18
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <check_buttons+0x26>
		bool current_button_pressed = !((current_buttons_pressed >> button_index) & 0b00000001); // Set to true if pressed, false if not pressed
 20c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <current_buttons_pressed>
 210:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <current_buttons_pressed+0x1>
 214:	0c 2e       	mov	r0, r28
 216:	02 c0       	rjmp	.+4      	; 0x21c <check_buttons+0x3e>
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <check_buttons+0x3a>
 220:	81 70       	andi	r24, 0x01	; 1
 222:	99 27       	eor	r25, r25
		if(previous_button_pressed && !current_button_pressed){
 224:	20 fd       	sbrc	r18, 0
 226:	2f c0       	rjmp	.+94     	; 0x286 <check_buttons+0xa8>
 228:	89 2b       	or	r24, r25
 22a:	69 f1       	breq	.+90     	; 0x286 <check_buttons+0xa8>
			switch(button_index){
 22c:	c2 30       	cpi	r28, 0x02	; 2
 22e:	d1 05       	cpc	r29, r1
 230:	11 f1       	breq	.+68     	; 0x276 <check_buttons+0x98>
 232:	34 f4       	brge	.+12     	; 0x240 <check_buttons+0x62>
 234:	20 97       	sbiw	r28, 0x00	; 0
 236:	59 f0       	breq	.+22     	; 0x24e <check_buttons+0x70>
 238:	c1 30       	cpi	r28, 0x01	; 1
 23a:	d1 05       	cpc	r29, r1
 23c:	81 f0       	breq	.+32     	; 0x25e <check_buttons+0x80>
 23e:	23 c0       	rjmp	.+70     	; 0x286 <check_buttons+0xa8>
 240:	c3 30       	cpi	r28, 0x03	; 3
 242:	d1 05       	cpc	r29, r1
 244:	d9 f0       	breq	.+54     	; 0x27c <check_buttons+0x9e>
 246:	c4 30       	cpi	r28, 0x04	; 4
 248:	d1 05       	cpc	r29, r1
 24a:	d9 f0       	breq	.+54     	; 0x282 <check_buttons+0xa4>
 24c:	1c c0       	rjmp	.+56     	; 0x286 <check_buttons+0xa8>
				case 0: // SW1
				if(startup){
 24e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 252:	81 11       	cpse	r24, r1
					start_game();
 254:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <start_game>
				}
				sound();
 258:	0e 94 ce 00 	call	0x19c	; 0x19c <sound>
				break;
 25c:	14 c0       	rjmp	.+40     	; 0x286 <check_buttons+0xa8>
				
				case 1: // SW2
				sound();
 25e:	0e 94 ce 00 	call	0x19c	; 0x19c <sound>
				game_score++;
 262:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <game_score>
 266:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <game_score+0x1>
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <game_score+0x1>
 270:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <game_score>
				break;
 274:	08 c0       	rjmp	.+16     	; 0x286 <check_buttons+0xa8>
				
				case 2: // SW3
				sound(); //test
 276:	0e 94 ce 00 	call	0x19c	; 0x19c <sound>
				break;
 27a:	05 c0       	rjmp	.+10     	; 0x286 <check_buttons+0xa8>
				
				case 3: // SW4
				sound();
 27c:	0e 94 ce 00 	call	0x19c	; 0x19c <sound>
				break;
 280:	02 c0       	rjmp	.+4      	; 0x286 <check_buttons+0xa8>
				
				case 4: // SW6
				sound();
 282:	0e 94 ce 00 	call	0x19c	; 0x19c <sound>
	return;
}

void check_buttons(){
	current_buttons_pressed = PINA; // Get current button pressed values
	for(int button_index = 0; button_index < 8; button_index++){
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	c8 30       	cpi	r28, 0x08	; 8
 28a:	d1 05       	cpc	r29, r1
 28c:	0c f4       	brge	.+2      	; 0x290 <check_buttons+0xb2>
 28e:	b4 cf       	rjmp	.-152    	; 0x1f8 <check_buttons+0x1a>
				break;
			}
		}
	}
	
	previous_buttons_pressed = current_buttons_pressed;
 290:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <current_buttons_pressed>
 294:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <current_buttons_pressed+0x1>
 298:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <previous_buttons_pressed+0x1>
 29c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <previous_buttons_pressed>
	
	current_E_buttons_pressed = PINE;
 2a0:	8c b1       	in	r24, 0x0c	; 12
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <current_E_buttons_pressed+0x1>
 2a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_E_buttons_pressed>
	int button_index = 6;
	bool previous_button_pressed = !((previous_E_buttons_pressed >> button_index) & 0b00000001); // Set to true if was pressed, false if was not pressed
 2ac:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <previous_E_buttons_pressed>
	bool current_button_pressed = !((current_E_buttons_pressed >> button_index) & 0b00000001); // Set to true if pressed, false if not pressed
 2b0:	86 fb       	bst	r24, 6
 2b2:	00 27       	eor	r16, r16
 2b4:	00 f9       	bld	r16, 0
 2b6:	10 e0       	ldi	r17, 0x00	; 0
	if(previous_button_pressed && !current_button_pressed){ // SW5
 2b8:	96 fd       	sbrc	r25, 6
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <check_buttons+0xe6>
 2bc:	01 2b       	or	r16, r17
 2be:	11 f0       	breq	.+4      	; 0x2c4 <check_buttons+0xe6>
		sound();
 2c0:	0e 94 ce 00 	call	0x19c	; 0x19c <sound>
	}
	previous_E_buttons_pressed = current_E_buttons_pressed;
 2c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_E_buttons_pressed>
 2c8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <current_E_buttons_pressed+0x1>
 2cc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <previous_E_buttons_pressed+0x1>
 2d0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <previous_E_buttons_pressed>
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <end_game>:
	startup = false;
	game = true;
}

void end_game(){
	PORTD = game_score ^ 0b11111111;	// Set PD to display score
 2de:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <game_score>
 2e2:	80 95       	com	r24
 2e4:	8b b9       	out	0x0b, r24	; 11
	game_score = 0;
 2e6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <game_score+0x1>
 2ea:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <game_score>
	startup = true;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	game = false;
 2f4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	sound();
 2f8:	0e 94 ce 00 	call	0x19c	; 0x19c <sound>
 2fc:	08 95       	ret

000002fe <start_update>:
}

void start_update(){ // Conducts any main-loop updates during start mode
	check_buttons();
 2fe:	0e 94 ef 00 	call	0x1de	; 0x1de <check_buttons>
 302:	08 95       	ret

00000304 <game_update>:
} 

void game_update(){ // Conducts any main-loop updates during game mode
	check_buttons();
 304:	0e 94 ef 00 	call	0x1de	; 0x1de <check_buttons>
	if(sec == 0) end_game(); // After 30 Seconds, game is finished
 308:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <sec>
 30c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <sec+0x1>
 310:	89 2b       	or	r24, r25
 312:	11 f4       	brne	.+4      	; 0x318 <game_update+0x14>
 314:	0e 94 6f 01 	call	0x2de	; 0x2de <end_game>
 318:	08 95       	ret

0000031a <main>:
}

int main(void)
{
	DDRA = 0x00; // Configure all PA bits to receive input from buttons
 31a:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Enable pull-up for PA
 31c:	9f ef       	ldi	r25, 0xFF	; 255
 31e:	92 b9       	out	0x02, r25	; 2
	
	DDRE |= 0b00010000; // Set PE4 to send output to speaker
 320:	8d b1       	in	r24, 0x0d	; 13
 322:	80 61       	ori	r24, 0x10	; 16
 324:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11101111; // Clear PE4
 326:	8e b1       	in	r24, 0x0e	; 14
 328:	8f 7e       	andi	r24, 0xEF	; 239
 32a:	8e b9       	out	0x0e, r24	; 14
	
	DDRD = 0xFF; // Configure all PD bits to send output to LED's
 32c:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x00; // Clear PD (LEDs are on)
 32e:	1b b8       	out	0x0b, r1	; 11
	
	timer_init_ctc();
 330:	0e 94 a4 00 	call	0x148	; 0x148 <timer_init_ctc>
	sei();
 334:	78 94       	sei
	timer1_start();
 336:	0e 94 bd 00 	call	0x17a	; 0x17a <timer1_start>

	while(1){
		if(startup) start_update();
 33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 33e:	81 11       	cpse	r24, r1
 340:	0e 94 7f 01 	call	0x2fe	; 0x2fe <start_update>
		if (game) game_update();
 344:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 348:	88 23       	and	r24, r24
 34a:	b9 f3       	breq	.-18     	; 0x33a <main+0x20>
 34c:	0e 94 82 01 	call	0x304	; 0x304 <game_update>
 350:	f4 cf       	rjmp	.-24     	; 0x33a <main+0x20>

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
