
Project2Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000626  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000626  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  000006c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d83  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8e  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005eb  00000000  00000000  00001fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000025ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f5  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025d  00000000  00000000  00002d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002f62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e6 e2       	ldi	r30, 0x26	; 38
  e0:	f6 e0       	ldi	r31, 0x06	; 6
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 30       	cpi	r26, 0x06	; 6
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a6 e0       	ldi	r26, 0x06	; 6
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a0 31       	cpi	r26, 0x10	; 16
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 10 02 	call	0x420	; 0x420 <main>
 102:	0c 94 11 03 	jmp	0x622	; 0x622 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <timer_init_ctc>:
		sec--;
	}
}

void timer_init_ctc(){
	TCCR1A = 0x00;
 10a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= 0x00 | (1 << WGM13) | (1 << WGM12);
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 61       	ori	r24, 0x18	; 24
 116:	80 83       	st	Z, r24
	TCNT1 |= 0x00;
 118:	e4 e8       	ldi	r30, 0x84	; 132
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	91 81       	ldd	r25, Z+1	; 0x01
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 124:	ef e6       	ldi	r30, 0x6F	; 111
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
	OCR1A = 0xF424;				//Pre-Scaler for 1 second intervals
 12e:	84 e2       	ldi	r24, 0x24	; 36
 130:	94 ef       	ldi	r25, 0xF4	; 244
 132:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 136:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 13a:	08 95       	ret

0000013c <timer1_start>:
}

void timer1_start(){
	TCCR1B |= (1 << CS12);
 13c:	e1 e8       	ldi	r30, 0x81	; 129
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <timer1_stop>:
}

void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
 148:	e1 e8       	ldi	r30, 0x81	; 129
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 7f       	andi	r24, 0xF8	; 248
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <incorrect_sound_delay>:
	return;
}

//should delay for 500Hz sound
void incorrect_sound_delay(){
	TCNT0 = 56; //changed to align with 500 Hz
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	86 bd       	out	0x26, r24	; 38
	TCCR0B = 0b00000010; // 64 timer pre-scale
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	85 bd       	out	0x25, r24	; 37
	while(!(TIFR0 << TOV0)){} // Waits 8000 machine cycle
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	88 23       	and	r24, r24
 160:	e9 f3       	breq	.-6      	; 0x15c <incorrect_sound_delay+0x8>
	TCCR0B = 0;
 162:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1 << TOV0);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	85 bb       	out	0x15, r24	; 21
 168:	08 95       	ret

0000016a <incorrect_sound>:
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
}


//repeats are 1/2 for 500Hz
void incorrect_sound(){
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
	for(int repeats = 0; repeats < 200; repeats++){
 16e:	c0 e0       	ldi	r28, 0x00	; 0
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	07 c0       	rjmp	.+14     	; 0x182 <incorrect_sound+0x18>
		PORTE ^= 0b00010000;
 174:	9e b1       	in	r25, 0x0e	; 14
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	89 27       	eor	r24, r25
 17a:	8e b9       	out	0x0e, r24	; 14
		incorrect_sound_delay();
 17c:	0e 94 aa 00 	call	0x154	; 0x154 <incorrect_sound_delay>
}


//repeats are 1/2 for 500Hz
void incorrect_sound(){
	for(int repeats = 0; repeats < 200; repeats++){
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	c8 3c       	cpi	r28, 0xC8	; 200
 184:	d1 05       	cpc	r29, r1
 186:	b4 f3       	brlt	.-20     	; 0x174 <incorrect_sound+0xa>
		PORTE ^= 0b00010000;
		incorrect_sound_delay();
	}
	return;
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <sound_delay>:
	}
	return;
}

void sound_delay(){
	TCNT0 = 130; // 125 * 64 = 8000
 18e:	82 e8       	ldi	r24, 0x82	; 130
 190:	86 bd       	out	0x26, r24	; 38
	TCCR0B = 0b00000011; // 64 timer pre-scale
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	85 bd       	out	0x25, r24	; 37
	while(!(TIFR0 << TOV0)){} // Waits 8000 machine cycles for 1000 Hz half wave
 196:	85 b3       	in	r24, 0x15	; 21
 198:	88 23       	and	r24, r24
 19a:	e9 f3       	breq	.-6      	; 0x196 <sound_delay+0x8>
	TCCR0B = 0;
 19c:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1 << TOV0);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	08 95       	ret

000001a4 <sound>:
	TCCR0B = 0;
	TIFR0 = (1 << TOV0);
	return;
}

void sound(){
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	for(int repeats = 0; repeats < 400; repeats++){
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <sound+0x18>
		PORTE ^= 0b00010000;
 1ae:	9e b1       	in	r25, 0x0e	; 14
 1b0:	80 e1       	ldi	r24, 0x10	; 16
 1b2:	89 27       	eor	r24, r25
 1b4:	8e b9       	out	0x0e, r24	; 14
		sound_delay();
 1b6:	0e 94 c7 00 	call	0x18e	; 0x18e <sound_delay>
	TIFR0 = (1 << TOV0);
	return;
}

void sound(){
	for(int repeats = 0; repeats < 400; repeats++){
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	c0 39       	cpi	r28, 0x90	; 144
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	d8 07       	cpc	r29, r24
 1c2:	ac f3       	brlt	.-22     	; 0x1ae <sound+0xa>
		PORTE ^= 0b00010000;
		sound_delay();
	}
	return;
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <randomLED>:
	TIFR0 = (1 << TOV0);
	return;
}

int randomLED() {
	int randomNum = led;
 1ca:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <led>
 1ce:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <led+0x1>
	while(randomNum == led){ // If last LED was not scored, LED should be distinct from the previous LED
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <randomLED+0x20>
							 // At start of game, led == 0, preventing pressing the start button from giving a point
							 // If an LED is scored, it turns off and led is set to -1, so it is allowed to be the next LED
		randomNum = rand() % 6;  // Generate a random number between 0 and 5
 1d4:	0e 94 df 02 	call	0x5be	; 0x5be <rand>
 1d8:	66 e0       	ldi	r22, 0x06	; 6
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 2a 02 	call	0x454	; 0x454 <__divmodhi4>
 1e0:	9c 01       	movw	r18, r24
		// 0, 1, 2, 5, 6, and 7 correspond to LED's that have corresponding buttons - should only return these numbers
		// Can achieve by generating number from 0 to 5 and adding 2 to any results >= 3
		if(randomNum >= 3) randomNum += 2;
 1e2:	03 97       	sbiw	r24, 0x03	; 3
 1e4:	14 f0       	brlt	.+4      	; 0x1ea <randomLED+0x20>
 1e6:	2e 5f       	subi	r18, 0xFE	; 254
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
	return;
}

int randomLED() {
	int randomNum = led;
	while(randomNum == led){ // If last LED was not scored, LED should be distinct from the previous LED
 1ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <led>
 1ee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <led+0x1>
 1f2:	28 17       	cp	r18, r24
 1f4:	39 07       	cpc	r19, r25
 1f6:	71 f3       	breq	.-36     	; 0x1d4 <randomLED+0xa>
		// 0, 1, 2, 5, 6, and 7 correspond to LED's that have corresponding buttons - should only return these numbers
		// Can achieve by generating number from 0 to 5 and adding 2 to any results >= 3
		if(randomNum >= 3) randomNum += 2;
	}
	return randomNum;
}
 1f8:	c9 01       	movw	r24, r18
 1fa:	08 95       	ret

000001fc <__vector_13>:

bool startup = true;
bool game = false;
bool gameover = false;

ISR(TIMER1_COMPA_vect){	// Every Second the Interrupt Service Routine will be performed
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	TCNT1 = 0x00;
 21e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 222:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	if(game){
 226:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <game>
 22a:	88 23       	and	r24, r24
 22c:	d1 f0       	breq	.+52     	; 0x262 <__vector_13+0x66>
		led = randomLED();
 22e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <randomLED>
 232:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <led>
 236:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <led+0x1>
		PORTD = 0xFF ^ (1 << led); // Turn on the corresponding LED       
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	a9 01       	movw	r20, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <__vector_13+0x4a>
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	8a 95       	dec	r24
 248:	e2 f7       	brpl	.-8      	; 0x242 <__vector_13+0x46>
 24a:	ca 01       	movw	r24, r20
 24c:	80 95       	com	r24
 24e:	8b b9       	out	0x0b, r24	; 11
		sec--;
 250:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sec>
 254:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sec+0x1>
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <sec+0x1>
 25e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sec>
	}
}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <start_up>:
		if(randomNum >= 3) randomNum += 2;
	}
	return randomNum;
}

void start_up(){
 284:	cf 92       	push	r12
 286:	df 92       	push	r13
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
	startup = true;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <startup>
	int rand_seed = 0;
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	d0 e0       	ldi	r29, 0x00	; 0
	
	
	while(startup){
 29a:	33 c0       	rjmp	.+102    	; 0x302 <start_up+0x7e>
		rand_seed++;
 29c:	be 01       	movw	r22, r28
 29e:	6f 5f       	subi	r22, 0xFF	; 255
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
		rand_seed %= 100000; // Random seed will be a pseudo-random number from 0-99999 based on how many loops occur before the game starts
 2a2:	07 2e       	mov	r0, r23
 2a4:	00 0c       	add	r0, r0
 2a6:	88 0b       	sbc	r24, r24
 2a8:	99 0b       	sbc	r25, r25
 2aa:	20 ea       	ldi	r18, 0xA0	; 160
 2ac:	36 e8       	ldi	r19, 0x86	; 134
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	0e 94 3e 02 	call	0x47c	; 0x47c <__divmodsi4>
 2b6:	6b 01       	movw	r12, r22
 2b8:	7c 01       	movw	r14, r24
 2ba:	eb 01       	movw	r28, r22

		//if user presses button for highscore
		if(~PINE & (1<<PINE6)){
 2bc:	66 99       	sbic	0x0c, 6	; 12
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <start_up+0x44>
			PORTD = highscore ^ 0xFF; //display highscore
 2c0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <highscore>
 2c4:	80 95       	com	r24
 2c6:	8b b9       	out	0x0b, r24	; 11
		}

		if(~PINA & (1<<PINA0)){			// If SW1 is pressed, start the game
 2c8:	00 99       	sbic	0x00, 0	; 0
 2ca:	1b c0       	rjmp	.+54     	; 0x302 <start_up+0x7e>
		
			sound();
 2cc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
			incorrect_sound();
 2d0:	0e 94 b5 00 	call	0x16a	; 0x16a <incorrect_sound>
			sound(); //plays series of tones to start up game
 2d4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>

			while(~PINA & (1<<PINA0));
 2d8:	00 9b       	sbis	0x00, 0	; 0
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <start_up+0x54>
			srand(rand_seed);
 2dc:	c6 01       	movw	r24, r12
 2de:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <srand>
			sei();
 2e2:	78 94       	sei
			timer1_start();
 2e4:	0e 94 9e 00 	call	0x13c	; 0x13c <timer1_start>
			sec = 30;
 2e8:	8e e1       	ldi	r24, 0x1E	; 30
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <sec+0x1>
 2f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sec>
			PORTD = 0xFF; // Set PD (LEDs are off)
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	8b b9       	out	0x0b, r24	; 11
			startup = false;
 2f8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <startup>
			game = true;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <game>
void start_up(){
	startup = true;
	int rand_seed = 0;
	
	
	while(startup){
 302:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <startup>
 306:	81 11       	cpse	r24, r1
 308:	c9 cf       	rjmp	.-110    	; 0x29c <start_up+0x18>
			PORTD = 0xFF; // Set PD (LEDs are off)
			startup = false;
			game = true;
		}
	}
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	cf 90       	pop	r12
 316:	08 95       	ret

00000318 <gameplay>:

void gameplay(){
    while (game) {
 318:	5a c0       	rjmp	.+180    	; 0x3ce <gameplay+0xb6>
		if((~PINA & (1<<led)) && (led != -1)){			// If correct button is pressed, score += 1
 31a:	80 b1       	in	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	80 95       	com	r24
 320:	90 95       	com	r25
 322:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <led>
 326:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <led+0x1>
 32a:	04 2e       	mov	r0, r20
 32c:	02 c0       	rjmp	.+4      	; 0x332 <gameplay+0x1a>
 32e:	95 95       	asr	r25
 330:	87 95       	ror	r24
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <gameplay+0x16>
 336:	80 ff       	sbrs	r24, 0
 338:	23 c0       	rjmp	.+70     	; 0x380 <gameplay+0x68>
 33a:	4f 3f       	cpi	r20, 0xFF	; 255
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	58 07       	cpc	r21, r24
 340:	f9 f0       	breq	.+62     	; 0x380 <gameplay+0x68>
			while(~PINA & (1<<led));
 342:	80 b1       	in	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	80 95       	com	r24
 348:	90 95       	com	r25
 34a:	04 2e       	mov	r0, r20
 34c:	02 c0       	rjmp	.+4      	; 0x352 <gameplay+0x3a>
 34e:	95 95       	asr	r25
 350:	87 95       	ror	r24
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <gameplay+0x36>
 356:	80 fd       	sbrc	r24, 0
 358:	f4 cf       	rjmp	.-24     	; 0x342 <gameplay+0x2a>
			score += 1;
 35a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <score>
 35e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <score+0x1>
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <score+0x1>
 368:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <score>
			led = -1; // Prevent further scoring until new LED starts
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <led+0x1>
 374:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <led>
			PORTD = 0xFF; // Set PD (LEDs are off)
 378:	8b b9       	out	0x0b, r24	; 11
			sound();
 37a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
 37e:	18 c0       	rjmp	.+48     	; 0x3b0 <gameplay+0x98>
		}
		else if((PINA | (0b00011000 | (1 << led))) != 0b11111111)//((PINA | 0b00011000) != 0b11111111) // If any incorrect LED button pressed, play incorrect sound
 380:	80 b1       	in	r24, 0x00	; 0
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <gameplay+0x74>
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	4a 95       	dec	r20
 38e:	e2 f7       	brpl	.-8      	; 0x388 <gameplay+0x70>
 390:	28 61       	ori	r18, 0x18	; 24
 392:	a9 01       	movw	r20, r18
 394:	48 2b       	or	r20, r24
 396:	ca 01       	movw	r24, r20
 398:	8f 3f       	cpi	r24, 0xFF	; 255
 39a:	91 05       	cpc	r25, r1
 39c:	49 f0       	breq	.+18     	; 0x3b0 <gameplay+0x98>
		{
			while((PINA | (0b00011000 | (1 << led))) != 0b11111111);
 39e:	80 b1       	in	r24, 0x00	; 0
 3a0:	a9 01       	movw	r20, r18
 3a2:	48 2b       	or	r20, r24
 3a4:	ca 01       	movw	r24, r20
 3a6:	8f 3f       	cpi	r24, 0xFF	; 255
 3a8:	91 05       	cpc	r25, r1
 3aa:	c9 f7       	brne	.-14     	; 0x39e <gameplay+0x86>
			incorrect_sound();
 3ac:	0e 94 b5 00 	call	0x16a	; 0x16a <incorrect_sound>
		}
		
	    if(sec <= 0){	// After 30 Seconds, game is finished
 3b0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sec>
 3b4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sec+0x1>
 3b8:	18 16       	cp	r1, r24
 3ba:	19 06       	cpc	r1, r25
 3bc:	44 f0       	brlt	.+16     	; 0x3ce <gameplay+0xb6>
		    PORTD = 0x00;	// Clear PD (LEDs are on)
 3be:	1b b8       	out	0x0b, r1	; 11
		    sound();
 3c0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
		    game = false;
 3c4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <game>
			gameover = true;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}
	}
}

void gameplay(){
    while (game) {
 3ce:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <game>
 3d2:	81 11       	cpse	r24, r1
 3d4:	a2 cf       	rjmp	.-188    	; 0x31a <gameplay+0x2>
		    sound();
		    game = false;
			gameover = true;
	    }
    }
}
 3d6:	08 95       	ret

000003d8 <game_over>:

void game_over(){
	timer1_stop();
 3d8:	0e 94 a4 00 	call	0x148	; 0x148 <timer1_stop>
	
	incorrect_sound();
 3dc:	0e 94 b5 00 	call	0x16a	; 0x16a <incorrect_sound>
	sound();
 3e0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
	incorrect_sound(); //plays series of tones to end game
 3e4:	0e 94 b5 00 	call	0x16a	; 0x16a <incorrect_sound>
	
	PORTD = score ^ 0xFF; // Display score
 3e8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <score>
 3ec:	80 95       	com	r24
 3ee:	8b b9       	out	0x0b, r24	; 11
	//if score is higher than high score set highscore to new score
	if (score > highscore)
 3f0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <score>
 3f4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <score+0x1>
 3f8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <highscore>
 3fc:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <highscore+0x1>
 400:	28 17       	cp	r18, r24
 402:	39 07       	cpc	r19, r25
 404:	24 f4       	brge	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		highscore = score;
 406:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <highscore+0x1>
 40a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <highscore>
	}
	score = 0;
 40e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <score+0x1>
 412:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <score>
	led = 0; // Reset LED to default value
 416:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <led+0x1>
 41a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <led>
 41e:	08 95       	ret

00000420 <main>:
}

int main(void) {
	DDRA = 0x00; // Configure all PA bits to receive input from buttons
 420:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Enable pull-up for PA
 422:	9f ef       	ldi	r25, 0xFF	; 255
 424:	92 b9       	out	0x02, r25	; 2

	DDRE &= ~(1 << PINE6); // Configure PE6 to receive input from SW5
 426:	8d b1       	in	r24, 0x0d	; 13
 428:	8f 7b       	andi	r24, 0xBF	; 191
 42a:	8d b9       	out	0x0d, r24	; 13
	PORTE |= (1 << PORTE6); // Enable pull-up for PE6
 42c:	8e b1       	in	r24, 0x0e	; 14
 42e:	80 64       	ori	r24, 0x40	; 64
 430:	8e b9       	out	0x0e, r24	; 14
	
	DDRE |= 0b00010000; // Set PE4 to send output to speaker
 432:	8d b1       	in	r24, 0x0d	; 13
 434:	80 61       	ori	r24, 0x10	; 16
 436:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11101111; // Clear PE4
 438:	8e b1       	in	r24, 0x0e	; 14
 43a:	8f 7e       	andi	r24, 0xEF	; 239
 43c:	8e b9       	out	0x0e, r24	; 14
	
	DDRD = 0xFF; // Configure all PD bits to send output to LED's
 43e:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x00; // Clear PD (LEDs are on)
 440:	1b b8       	out	0x0b, r1	; 11

	timer_init_ctc();
 442:	0e 94 85 00 	call	0x10a	; 0x10a <timer_init_ctc>
	
	while(1){
		start_up();
 446:	0e 94 42 01 	call	0x284	; 0x284 <start_up>
		gameplay();
 44a:	0e 94 8c 01 	call	0x318	; 0x318 <gameplay>
		game_over();
 44e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <game_over>
 452:	f9 cf       	rjmp	.-14     	; 0x446 <main+0x26>

00000454 <__divmodhi4>:
 454:	97 fb       	bst	r25, 7
 456:	07 2e       	mov	r0, r23
 458:	16 f4       	brtc	.+4      	; 0x45e <__divmodhi4+0xa>
 45a:	00 94       	com	r0
 45c:	07 d0       	rcall	.+14     	; 0x46c <__divmodhi4_neg1>
 45e:	77 fd       	sbrc	r23, 7
 460:	09 d0       	rcall	.+18     	; 0x474 <__divmodhi4_neg2>
 462:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__udivmodhi4>
 466:	07 fc       	sbrc	r0, 7
 468:	05 d0       	rcall	.+10     	; 0x474 <__divmodhi4_neg2>
 46a:	3e f4       	brtc	.+14     	; 0x47a <__divmodhi4_exit>

0000046c <__divmodhi4_neg1>:
 46c:	90 95       	com	r25
 46e:	81 95       	neg	r24
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	08 95       	ret

00000474 <__divmodhi4_neg2>:
 474:	70 95       	com	r23
 476:	61 95       	neg	r22
 478:	7f 4f       	sbci	r23, 0xFF	; 255

0000047a <__divmodhi4_exit>:
 47a:	08 95       	ret

0000047c <__divmodsi4>:
 47c:	05 2e       	mov	r0, r21
 47e:	97 fb       	bst	r25, 7
 480:	1e f4       	brtc	.+6      	; 0x488 <__divmodsi4+0xc>
 482:	00 94       	com	r0
 484:	0e 94 55 02 	call	0x4aa	; 0x4aa <__negsi2>
 488:	57 fd       	sbrc	r21, 7
 48a:	07 d0       	rcall	.+14     	; 0x49a <__divmodsi4_neg2>
 48c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__udivmodsi4>
 490:	07 fc       	sbrc	r0, 7
 492:	03 d0       	rcall	.+6      	; 0x49a <__divmodsi4_neg2>
 494:	4e f4       	brtc	.+18     	; 0x4a8 <__divmodsi4_exit>
 496:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__negsi2>

0000049a <__divmodsi4_neg2>:
 49a:	50 95       	com	r21
 49c:	40 95       	com	r20
 49e:	30 95       	com	r19
 4a0:	21 95       	neg	r18
 4a2:	3f 4f       	sbci	r19, 0xFF	; 255
 4a4:	4f 4f       	sbci	r20, 0xFF	; 255
 4a6:	5f 4f       	sbci	r21, 0xFF	; 255

000004a8 <__divmodsi4_exit>:
 4a8:	08 95       	ret

000004aa <__negsi2>:
 4aa:	90 95       	com	r25
 4ac:	80 95       	com	r24
 4ae:	70 95       	com	r23
 4b0:	61 95       	neg	r22
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	8f 4f       	sbci	r24, 0xFF	; 255
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	08 95       	ret

000004ba <__udivmodhi4>:
 4ba:	aa 1b       	sub	r26, r26
 4bc:	bb 1b       	sub	r27, r27
 4be:	51 e1       	ldi	r21, 0x11	; 17
 4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <__udivmodhi4_ep>

000004c2 <__udivmodhi4_loop>:
 4c2:	aa 1f       	adc	r26, r26
 4c4:	bb 1f       	adc	r27, r27
 4c6:	a6 17       	cp	r26, r22
 4c8:	b7 07       	cpc	r27, r23
 4ca:	10 f0       	brcs	.+4      	; 0x4d0 <__udivmodhi4_ep>
 4cc:	a6 1b       	sub	r26, r22
 4ce:	b7 0b       	sbc	r27, r23

000004d0 <__udivmodhi4_ep>:
 4d0:	88 1f       	adc	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	5a 95       	dec	r21
 4d6:	a9 f7       	brne	.-22     	; 0x4c2 <__udivmodhi4_loop>
 4d8:	80 95       	com	r24
 4da:	90 95       	com	r25
 4dc:	bc 01       	movw	r22, r24
 4de:	cd 01       	movw	r24, r26
 4e0:	08 95       	ret

000004e2 <__udivmodsi4>:
 4e2:	a1 e2       	ldi	r26, 0x21	; 33
 4e4:	1a 2e       	mov	r1, r26
 4e6:	aa 1b       	sub	r26, r26
 4e8:	bb 1b       	sub	r27, r27
 4ea:	fd 01       	movw	r30, r26
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <__udivmodsi4_ep>

000004ee <__udivmodsi4_loop>:
 4ee:	aa 1f       	adc	r26, r26
 4f0:	bb 1f       	adc	r27, r27
 4f2:	ee 1f       	adc	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	a2 17       	cp	r26, r18
 4f8:	b3 07       	cpc	r27, r19
 4fa:	e4 07       	cpc	r30, r20
 4fc:	f5 07       	cpc	r31, r21
 4fe:	20 f0       	brcs	.+8      	; 0x508 <__udivmodsi4_ep>
 500:	a2 1b       	sub	r26, r18
 502:	b3 0b       	sbc	r27, r19
 504:	e4 0b       	sbc	r30, r20
 506:	f5 0b       	sbc	r31, r21

00000508 <__udivmodsi4_ep>:
 508:	66 1f       	adc	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	1a 94       	dec	r1
 512:	69 f7       	brne	.-38     	; 0x4ee <__udivmodsi4_loop>
 514:	60 95       	com	r22
 516:	70 95       	com	r23
 518:	80 95       	com	r24
 51a:	90 95       	com	r25
 51c:	9b 01       	movw	r18, r22
 51e:	ac 01       	movw	r20, r24
 520:	bd 01       	movw	r22, r26
 522:	cf 01       	movw	r24, r30
 524:	08 95       	ret

00000526 <do_rand>:
 526:	8f 92       	push	r8
 528:	9f 92       	push	r9
 52a:	af 92       	push	r10
 52c:	bf 92       	push	r11
 52e:	cf 92       	push	r12
 530:	df 92       	push	r13
 532:	ef 92       	push	r14
 534:	ff 92       	push	r15
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	ec 01       	movw	r28, r24
 53c:	68 81       	ld	r22, Y
 53e:	79 81       	ldd	r23, Y+1	; 0x01
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	9b 81       	ldd	r25, Y+3	; 0x03
 544:	61 15       	cp	r22, r1
 546:	71 05       	cpc	r23, r1
 548:	81 05       	cpc	r24, r1
 54a:	91 05       	cpc	r25, r1
 54c:	21 f4       	brne	.+8      	; 0x556 <do_rand+0x30>
 54e:	64 e2       	ldi	r22, 0x24	; 36
 550:	79 ed       	ldi	r23, 0xD9	; 217
 552:	8b e5       	ldi	r24, 0x5B	; 91
 554:	97 e0       	ldi	r25, 0x07	; 7
 556:	2d e1       	ldi	r18, 0x1D	; 29
 558:	33 ef       	ldi	r19, 0xF3	; 243
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	50 e0       	ldi	r21, 0x00	; 0
 55e:	0e 94 3e 02 	call	0x47c	; 0x47c <__divmodsi4>
 562:	49 01       	movw	r8, r18
 564:	5a 01       	movw	r10, r20
 566:	9b 01       	movw	r18, r22
 568:	ac 01       	movw	r20, r24
 56a:	a7 ea       	ldi	r26, 0xA7	; 167
 56c:	b1 e4       	ldi	r27, 0x41	; 65
 56e:	0e 94 ef 02 	call	0x5de	; 0x5de <__muluhisi3>
 572:	6b 01       	movw	r12, r22
 574:	7c 01       	movw	r14, r24
 576:	ac ee       	ldi	r26, 0xEC	; 236
 578:	b4 ef       	ldi	r27, 0xF4	; 244
 57a:	a5 01       	movw	r20, r10
 57c:	94 01       	movw	r18, r8
 57e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__mulohisi3>
 582:	dc 01       	movw	r26, r24
 584:	cb 01       	movw	r24, r22
 586:	8c 0d       	add	r24, r12
 588:	9d 1d       	adc	r25, r13
 58a:	ae 1d       	adc	r26, r14
 58c:	bf 1d       	adc	r27, r15
 58e:	b7 ff       	sbrs	r27, 7
 590:	03 c0       	rjmp	.+6      	; 0x598 <do_rand+0x72>
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	a1 09       	sbc	r26, r1
 596:	b0 48       	sbci	r27, 0x80	; 128
 598:	88 83       	st	Y, r24
 59a:	99 83       	std	Y+1, r25	; 0x01
 59c:	aa 83       	std	Y+2, r26	; 0x02
 59e:	bb 83       	std	Y+3, r27	; 0x03
 5a0:	9f 77       	andi	r25, 0x7F	; 127
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	ff 90       	pop	r15
 5a8:	ef 90       	pop	r14
 5aa:	df 90       	pop	r13
 5ac:	cf 90       	pop	r12
 5ae:	bf 90       	pop	r11
 5b0:	af 90       	pop	r10
 5b2:	9f 90       	pop	r9
 5b4:	8f 90       	pop	r8
 5b6:	08 95       	ret

000005b8 <rand_r>:
 5b8:	0e 94 93 02 	call	0x526	; 0x526 <do_rand>
 5bc:	08 95       	ret

000005be <rand>:
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	0e 94 93 02 	call	0x526	; 0x526 <do_rand>
 5c6:	08 95       	ret

000005c8 <srand>:
 5c8:	a0 e0       	ldi	r26, 0x00	; 0
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 5d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5d4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5d8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 5dc:	08 95       	ret

000005de <__muluhisi3>:
 5de:	0e 94 02 03 	call	0x604	; 0x604 <__umulhisi3>
 5e2:	a5 9f       	mul	r26, r21
 5e4:	90 0d       	add	r25, r0
 5e6:	b4 9f       	mul	r27, r20
 5e8:	90 0d       	add	r25, r0
 5ea:	a4 9f       	mul	r26, r20
 5ec:	80 0d       	add	r24, r0
 5ee:	91 1d       	adc	r25, r1
 5f0:	11 24       	eor	r1, r1
 5f2:	08 95       	ret

000005f4 <__mulshisi3>:
 5f4:	b7 ff       	sbrs	r27, 7
 5f6:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__muluhisi3>

000005fa <__mulohisi3>:
 5fa:	0e 94 ef 02 	call	0x5de	; 0x5de <__muluhisi3>
 5fe:	82 1b       	sub	r24, r18
 600:	93 0b       	sbc	r25, r19
 602:	08 95       	ret

00000604 <__umulhisi3>:
 604:	a2 9f       	mul	r26, r18
 606:	b0 01       	movw	r22, r0
 608:	b3 9f       	mul	r27, r19
 60a:	c0 01       	movw	r24, r0
 60c:	a3 9f       	mul	r26, r19
 60e:	70 0d       	add	r23, r0
 610:	81 1d       	adc	r24, r1
 612:	11 24       	eor	r1, r1
 614:	91 1d       	adc	r25, r1
 616:	b2 9f       	mul	r27, r18
 618:	70 0d       	add	r23, r0
 61a:	81 1d       	adc	r24, r1
 61c:	11 24       	eor	r1, r1
 61e:	91 1d       	adc	r25, r1
 620:	08 95       	ret

00000622 <_exit>:
 622:	f8 94       	cli

00000624 <__stop_program>:
 624:	ff cf       	rjmp	.-2      	; 0x624 <__stop_program>
