
Project2Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000033e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  000003de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd5  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6b  00000000  00000000  0000118d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051a  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d2  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d0  00000000  00000000  000027ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000299e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_13>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	14 01       	movw	r2, r8
  ce:	17 01       	movw	r2, r14
  d0:	1a 01       	movw	r2, r20
  d2:	1d 01       	movw	r2, r26
  d4:	20 01       	movw	r4, r0
  d6:	23 01       	movw	r4, r6
  d8:	26 01       	movw	r4, r12
  da:	29 01       	movw	r4, r18

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d8 e0       	ldi	r29, 0x08	; 8
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	ee e3       	ldi	r30, 0x3E	; 62
  f0:	f3 e0       	ldi	r31, 0x03	; 3
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
  f4:	05 90       	lpm	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	ac 30       	cpi	r26, 0x0C	; 12
  fa:	b1 07       	cpc	r27, r17
  fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	ac e0       	ldi	r26, 0x0C	; 12
 102:	b1 e0       	ldi	r27, 0x01	; 1
 104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
 106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
 108:	ad 30       	cpi	r26, 0x0D	; 13
 10a:	b2 07       	cpc	r27, r18
 10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
 10e:	0e 94 80 01 	call	0x300	; 0x300 <main>
 112:	0c 94 9d 01 	jmp	0x33a	; 0x33a <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <__vector_13>:
void timer1_start(){
	TCCR1B |= (1 << CS12);
}

void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 12c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 130:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sec>
 134:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <sec+0x1>
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <sec+0x1>
 13e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sec>
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <timer_init_ctc>:
 150:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 154:	e1 e8       	ldi	r30, 0x81	; 129
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 61       	ori	r24, 0x18	; 24
 15c:	80 83       	st	Z, r24
 15e:	e4 e8       	ldi	r30, 0x84	; 132
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	91 83       	std	Z+1, r25	; 0x01
 168:	80 83       	st	Z, r24
 16a:	ef e6       	ldi	r30, 0x6F	; 111
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	82 60       	ori	r24, 0x02	; 2
 172:	80 83       	st	Z, r24
 174:	84 e2       	ldi	r24, 0x24	; 36
 176:	94 ef       	ldi	r25, 0xF4	; 244
 178:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 17c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 180:	08 95       	ret

00000182 <timer1_start>:
 182:	e1 e8       	ldi	r30, 0x81	; 129
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret

0000018e <sound_delay>:
	}
	return;
}

void sound_delay(){
	TCNT0 = 130; //125 * 64 = 8000
 18e:	82 e8       	ldi	r24, 0x82	; 130
 190:	86 bd       	out	0x26, r24	; 38
	TCCR0B = 0b00000011; //64 timer pre-scale
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	85 bd       	out	0x25, r24	; 37
	while(!(TIFR0 << TOV0)){} //waits 8000 machine cycles for 1000 Hz half wave
 196:	85 b3       	in	r24, 0x15	; 21
 198:	88 23       	and	r24, r24
 19a:	e9 f3       	breq	.-6      	; 0x196 <sound_delay+0x8>
	TCCR0B = 0;
 19c:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1 << TOV0);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	08 95       	ret

000001a4 <sound>:

void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
}

void sound(){
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	for(int repeats = 0; repeats < 400; repeats++){
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <sound+0x18>
		PORTE ^= 0b00010000;
 1ae:	9e b1       	in	r25, 0x0e	; 14
 1b0:	80 e1       	ldi	r24, 0x10	; 16
 1b2:	89 27       	eor	r24, r25
 1b4:	8e b9       	out	0x0e, r24	; 14
		sound_delay();
 1b6:	0e 94 c7 00 	call	0x18e	; 0x18e <sound_delay>
void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
}

void sound(){
	for(int repeats = 0; repeats < 400; repeats++){
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	c0 39       	cpi	r28, 0x90	; 144
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	d8 07       	cpc	r29, r24
 1c2:	ac f3       	brlt	.-22     	; 0x1ae <sound+0xa>
		PORTE ^= 0b00010000;
		sound_delay();
	}
	return;
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <check_buttons>:
	TCCR0B = 0;
	TIFR0 = (1 << TOV0);
	return;
}

void check_buttons(){
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
	current_buttons_pressed = PINA; // Get current button pressed values
 1d2:	80 b1       	in	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <current_buttons_pressed+0x1>
 1da:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <current_buttons_pressed>
	for(int button_index = 0; button_index < 8; button_index++){
 1de:	c0 e0       	ldi	r28, 0x00	; 0
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
 1e2:	3a c0       	rjmp	.+116    	; 0x258 <check_buttons+0x8e>
		bool previous_button_pressed = !((previous_buttons_pressed >> button_index) & 0b00000001); // Set to true if was pressed, false if was not pressed
 1e4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <previous_buttons_pressed>
 1e8:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <previous_buttons_pressed+0x1>
 1ec:	0c 2e       	mov	r0, r28
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <check_buttons+0x2a>
 1f0:	35 95       	asr	r19
 1f2:	27 95       	ror	r18
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <check_buttons+0x26>
		bool current_button_pressed = !((current_buttons_pressed >> button_index) & 0b00000001); // Set to true if pressed, false if not pressed
 1f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <current_buttons_pressed>
 1fc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <current_buttons_pressed+0x1>
 200:	0c 2e       	mov	r0, r28
 202:	02 c0       	rjmp	.+4      	; 0x208 <check_buttons+0x3e>
 204:	95 95       	asr	r25
 206:	87 95       	ror	r24
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <check_buttons+0x3a>
 20c:	81 70       	andi	r24, 0x01	; 1
 20e:	99 27       	eor	r25, r25
		if(previous_button_pressed && !current_button_pressed){
 210:	20 fd       	sbrc	r18, 0
 212:	21 c0       	rjmp	.+66     	; 0x256 <check_buttons+0x8c>
 214:	89 2b       	or	r24, r25
 216:	f9 f0       	breq	.+62     	; 0x256 <check_buttons+0x8c>
			switch(button_index){
 218:	c8 30       	cpi	r28, 0x08	; 8
 21a:	d1 05       	cpc	r29, r1
 21c:	e0 f4       	brcc	.+56     	; 0x256 <check_buttons+0x8c>
 21e:	fe 01       	movw	r30, r28
 220:	ea 59       	subi	r30, 0x9A	; 154
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	0c 94 97 01 	jmp	0x32e	; 0x32e <__tablejump2__>
				case 0:
				sound();
 228:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
				break;
 22c:	14 c0       	rjmp	.+40     	; 0x256 <check_buttons+0x8c>
				case 1:
				sound();
 22e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
				break;
 232:	11 c0       	rjmp	.+34     	; 0x256 <check_buttons+0x8c>
				case 2:
				sound();
 234:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
				break;
 238:	0e c0       	rjmp	.+28     	; 0x256 <check_buttons+0x8c>
				case 3:
				sound();
 23a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
				break;
 23e:	0b c0       	rjmp	.+22     	; 0x256 <check_buttons+0x8c>
				case 4:
				sound();
 240:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
				break;
 244:	08 c0       	rjmp	.+16     	; 0x256 <check_buttons+0x8c>
				case 5:
				sound();
 246:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
				break;
 24a:	05 c0       	rjmp	.+10     	; 0x256 <check_buttons+0x8c>
				case 6:
				sound();
 24c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
				break;
 250:	02 c0       	rjmp	.+4      	; 0x256 <check_buttons+0x8c>
				case 7:
				sound();
 252:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
	return;
}

void check_buttons(){
	current_buttons_pressed = PINA; // Get current button pressed values
	for(int button_index = 0; button_index < 8; button_index++){
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	c8 30       	cpi	r28, 0x08	; 8
 25a:	d1 05       	cpc	r29, r1
 25c:	1c f2       	brlt	.-122    	; 0x1e4 <check_buttons+0x1a>
				break;
			}
		}
	}
	
	previous_buttons_pressed = current_buttons_pressed;
 25e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <current_buttons_pressed>
 262:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <current_buttons_pressed+0x1>
 266:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <previous_buttons_pressed+0x1>
 26a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <previous_buttons_pressed>
	
	current_E_buttons_pressed = PINE;
 26e:	8c b1       	in	r24, 0x0c	; 12
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <current_E_buttons_pressed+0x1>
 276:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_E_buttons_pressed>
	int button_index = 6;
	bool previous_button_pressed = !((previous_E_buttons_pressed >> button_index) & 0b00000001); // Set to true if was pressed, false if was not pressed
 27a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <previous_E_buttons_pressed>
	bool current_button_pressed = !((current_E_buttons_pressed >> button_index) & 0b00000001); // Set to true if pressed, false if not pressed
 27e:	86 fb       	bst	r24, 6
 280:	00 27       	eor	r16, r16
 282:	00 f9       	bld	r16, 0
 284:	10 e0       	ldi	r17, 0x00	; 0
	if(previous_button_pressed && !current_button_pressed){ // SW5
 286:	96 fd       	sbrc	r25, 6
 288:	04 c0       	rjmp	.+8      	; 0x292 <check_buttons+0xc8>
 28a:	01 2b       	or	r16, r17
 28c:	11 f0       	breq	.+4      	; 0x292 <check_buttons+0xc8>
		sound();
 28e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
	}
	previous_E_buttons_pressed = current_E_buttons_pressed;
 292:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_E_buttons_pressed>
 296:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <current_E_buttons_pressed+0x1>
 29a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <previous_E_buttons_pressed+0x1>
 29e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <previous_E_buttons_pressed>
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <start_up>:

void start_up(){
	while(startup){
 2ac:	11 c0       	rjmp	.+34     	; 0x2d0 <start_up+0x24>
		if(~PINA & (1<<PINA0)){			// If SW1 is pressed, start the game
 2ae:	00 99       	sbic	0x00, 0	; 0
 2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <start_up+0x24>
			while(~PINA & (1<<PINA0));
 2b2:	00 9b       	sbis	0x00, 0	; 0
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <start_up+0x6>
			sec = 30;
 2b6:	8e e1       	ldi	r24, 0x1E	; 30
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <sec+0x1>
 2be:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sec>
			PORTD = 0xFF; // Set PD (LEDs are off)
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	8b b9       	out	0x0b, r24	; 11
			startup = false;
 2c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			game = true;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	}
	previous_E_buttons_pressed = current_E_buttons_pressed;
}

void start_up(){
	while(startup){
 2d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d4:	81 11       	cpse	r24, r1
 2d6:	eb cf       	rjmp	.-42     	; 0x2ae <start_up+0x2>
			PORTD = 0xFF; // Set PD (LEDs are off)
			startup = false;
			game = true;
		}
	}
}
 2d8:	08 95       	ret

000002da <game_up>:

void game_up(){
    while (game) {
 2da:	0d c0       	rjmp	.+26     	; 0x2f6 <game_up+0x1c>
	    check_buttons();
 2dc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <check_buttons>

	    if(sec == 0){	// After 30 Seconds, game is finished
 2e0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sec>
 2e4:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <sec+0x1>
 2e8:	89 2b       	or	r24, r25
 2ea:	29 f4       	brne	.+10     	; 0x2f6 <game_up+0x1c>
		    PORTD = 0x00;	// Clear PD (LEDs are on)
 2ec:	1b b8       	out	0x0b, r1	; 11
		    sound();
 2ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sound>
		    game = false;
 2f2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		}
	}
}

void game_up(){
    while (game) {
 2f6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2fa:	81 11       	cpse	r24, r1
 2fc:	ef cf       	rjmp	.-34     	; 0x2dc <game_up+0x2>
		    PORTD = 0x00;	// Clear PD (LEDs are on)
		    sound();
		    game = false;
	    }
    }
}
 2fe:	08 95       	ret

00000300 <main>:

int main(void)
{
	DDRA = 0x00; // Configure all PA bits to receive input from buttons
 300:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Enable pull-up for PA
 302:	9f ef       	ldi	r25, 0xFF	; 255
 304:	92 b9       	out	0x02, r25	; 2
	
	DDRE |= 0b00010000; // Set PE4 to send output to speaker
 306:	8d b1       	in	r24, 0x0d	; 13
 308:	80 61       	ori	r24, 0x10	; 16
 30a:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11101111; // Clear PE4
 30c:	8e b1       	in	r24, 0x0e	; 14
 30e:	8f 7e       	andi	r24, 0xEF	; 239
 310:	8e b9       	out	0x0e, r24	; 14
	
	DDRD = 0xFF; // Configure all PD bits to send output to LED's
 312:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x00; // Clear PD (LEDs are on)
 314:	1b b8       	out	0x0b, r1	; 11
	
	timer_init_ctc();
 316:	0e 94 a8 00 	call	0x150	; 0x150 <timer_init_ctc>
	sei();
 31a:	78 94       	sei
	timer1_start();
 31c:	0e 94 c1 00 	call	0x182	; 0x182 <timer1_start>
	
	start_up();
 320:	0e 94 56 01 	call	0x2ac	; 0x2ac <start_up>
	
	game_up();
 324:	0e 94 6d 01 	call	0x2da	; 0x2da <game_up>
}
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	08 95       	ret

0000032e <__tablejump2__>:
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	05 90       	lpm	r0, Z+
 334:	f4 91       	lpm	r31, Z
 336:	e0 2d       	mov	r30, r0
 338:	09 94       	ijmp

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
