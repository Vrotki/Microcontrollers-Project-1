
Project2Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000558  000005ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800106  00800106  000005f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc4  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8e  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000513  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005dd  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d6  00000000  00000000  00002a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002c13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e8 e5       	ldi	r30, 0x58	; 88
  e0:	f5 e0       	ldi	r31, 0x05	; 5
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 30       	cpi	r26, 0x06	; 6
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a6 e0       	ldi	r26, 0x06	; 6
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ae 30       	cpi	r26, 0x0E	; 14
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 af 01 	call	0x35e	; 0x35e <main>
 102:	0c 94 aa 02 	jmp	0x554	; 0x554 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <timer_init_ctc>:
		sec--;
	}
}

void timer_init_ctc(){
	TCCR1A = 0x00;
 10a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= 0x00 | (1 << WGM13) | (1 << WGM12);
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 61       	ori	r24, 0x18	; 24
 116:	80 83       	st	Z, r24
	TCNT1 |= 0x00;
 118:	e4 e8       	ldi	r30, 0x84	; 132
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	91 81       	ldd	r25, Z+1	; 0x01
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 124:	ef e6       	ldi	r30, 0x6F	; 111
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
	OCR1A = 0xF424;				//Pre-Scaler for 1 second intervals
 12e:	84 e2       	ldi	r24, 0x24	; 36
 130:	94 ef       	ldi	r25, 0xF4	; 244
 132:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 136:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 13a:	08 95       	ret

0000013c <timer1_start>:
}

void timer1_start(){
	TCCR1B |= (1 << CS12);
 13c:	e1 e8       	ldi	r30, 0x81	; 129
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <timer1_stop>:
}

void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
 148:	e1 e8       	ldi	r30, 0x81	; 129
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 7f       	andi	r24, 0xF8	; 248
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <sound_delay>:
	}
	return;
}

void sound_delay(){
	TCNT0 = 130; // 125 * 64 = 8000
 154:	82 e8       	ldi	r24, 0x82	; 130
 156:	86 bd       	out	0x26, r24	; 38
	TCCR0B = 0b00000011; // 64 timer pre-scale
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	85 bd       	out	0x25, r24	; 37
	while(!(TIFR0 << TOV0)){} // Waits 8000 machine cycles for 1000 Hz half wave
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	88 23       	and	r24, r24
 160:	e9 f3       	breq	.-6      	; 0x15c <sound_delay+0x8>
	TCCR0B = 0;
 162:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1 << TOV0);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	85 bb       	out	0x15, r24	; 21
 168:	08 95       	ret

0000016a <sound>:

void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
}

void sound(){
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
	for(int repeats = 0; repeats < 400; repeats++){
 16e:	c0 e0       	ldi	r28, 0x00	; 0
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	07 c0       	rjmp	.+14     	; 0x182 <sound+0x18>
		PORTE ^= 0b00010000;
 174:	9e b1       	in	r25, 0x0e	; 14
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	89 27       	eor	r24, r25
 17a:	8e b9       	out	0x0e, r24	; 14
		sound_delay();
 17c:	0e 94 aa 00 	call	0x154	; 0x154 <sound_delay>
void timer1_stop(){
	TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10));
}

void sound(){
	for(int repeats = 0; repeats < 400; repeats++){
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	c0 39       	cpi	r28, 0x90	; 144
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	d8 07       	cpc	r29, r24
 188:	ac f3       	brlt	.-22     	; 0x174 <sound+0xa>
		PORTE ^= 0b00010000;
		sound_delay();
	}
	return;
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <randomLED>:
	TIFR0 = (1 << TOV0);
	return;
}

int randomLED() {
	int randomNum = led;
 190:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <led>
 194:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <led+0x1>
	while(randomNum == led){ // If last LED was not scored, LED should be distinct from the previous LED
 198:	0b c0       	rjmp	.+22     	; 0x1b0 <randomLED+0x20>
							 // At start of game, led == 0, preventing pressing the start button from giving a point
							 // If an LED is scored, it turns off and led is set to -1, so it is allowed to be the next LED
		randomNum = rand() % 6;  // Generate a random number between 0 and 5
 19a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <rand>
 19e:	66 e0       	ldi	r22, 0x06	; 6
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	0e 94 c3 01 	call	0x386	; 0x386 <__divmodhi4>
 1a6:	9c 01       	movw	r18, r24
		// 0, 1, 2, 5, 6, and 7 correspond to LED's that have corresponding buttons - should only return these numbers
		// Can achieve by generating number from 0 to 5 and adding 2 to any results >= 3
		if(randomNum >= 3) randomNum += 2;
 1a8:	03 97       	sbiw	r24, 0x03	; 3
 1aa:	14 f0       	brlt	.+4      	; 0x1b0 <randomLED+0x20>
 1ac:	2e 5f       	subi	r18, 0xFE	; 254
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
	return;
}

int randomLED() {
	int randomNum = led;
	while(randomNum == led){ // If last LED was not scored, LED should be distinct from the previous LED
 1b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <led>
 1b4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <led+0x1>
 1b8:	28 17       	cp	r18, r24
 1ba:	39 07       	cpc	r19, r25
 1bc:	71 f3       	breq	.-36     	; 0x19a <randomLED+0xa>
		// 0, 1, 2, 5, 6, and 7 correspond to LED's that have corresponding buttons - should only return these numbers
		// Can achieve by generating number from 0 to 5 and adding 2 to any results >= 3
		if(randomNum >= 3) randomNum += 2;
	}
	return randomNum;
}
 1be:	c9 01       	movw	r24, r18
 1c0:	08 95       	ret

000001c2 <__vector_13>:

bool startup = true;
bool game = false;
bool gameover = false;

ISR(TIMER1_COMPA_vect){	// Every Second the Interrupt Service Routine will be performed
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	TCNT1 = 0x00;
 1e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	if(game){
 1ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <game>
 1f0:	88 23       	and	r24, r24
 1f2:	d1 f0       	breq	.+52     	; 0x228 <__vector_13+0x66>
		led = randomLED();
 1f4:	0e 94 c8 00 	call	0x190	; 0x190 <randomLED>
 1f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <led>
 1fc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <led+0x1>
		PORTD = 0xFF ^ (1 << led); // Turn on the corresponding LED       
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	a9 01       	movw	r20, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <__vector_13+0x4a>
 208:	44 0f       	add	r20, r20
 20a:	55 1f       	adc	r21, r21
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <__vector_13+0x46>
 210:	ca 01       	movw	r24, r20
 212:	80 95       	com	r24
 214:	8b b9       	out	0x0b, r24	; 11
		sec--;
 216:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sec>
 21a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sec+0x1>
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <sec+0x1>
 224:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sec>
	}
}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <start_up>:
		if(randomNum >= 3) randomNum += 2;
	}
	return randomNum;
}

void start_up(){
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
	startup = true;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <startup>
	int rand_seed = 0;
 254:	c0 e0       	ldi	r28, 0x00	; 0
 256:	d0 e0       	ldi	r29, 0x00	; 0
	while(startup){
 258:	25 c0       	rjmp	.+74     	; 0x2a4 <start_up+0x5a>
		rand_seed++;
 25a:	be 01       	movw	r22, r28
 25c:	6f 5f       	subi	r22, 0xFF	; 255
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
		rand_seed %= 100000; // Random seed will be a pseudo-random number from 0-99999 based on how many loops occur before the game starts
 260:	07 2e       	mov	r0, r23
 262:	00 0c       	add	r0, r0
 264:	88 0b       	sbc	r24, r24
 266:	99 0b       	sbc	r25, r25
 268:	20 ea       	ldi	r18, 0xA0	; 160
 26a:	36 e8       	ldi	r19, 0x86	; 134
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodsi4>
 274:	eb 01       	movw	r28, r22
		if(~PINA & (1<<PINA0)){			// If SW1 is pressed, start the game
 276:	00 99       	sbic	0x00, 0	; 0
 278:	15 c0       	rjmp	.+42     	; 0x2a4 <start_up+0x5a>
			while(~PINA & (1<<PINA0));
 27a:	00 9b       	sbis	0x00, 0	; 0
 27c:	fe cf       	rjmp	.-4      	; 0x27a <start_up+0x30>
			srand(rand_seed);
 27e:	cb 01       	movw	r24, r22
 280:	0e 94 7d 02 	call	0x4fa	; 0x4fa <srand>
			sei();
 284:	78 94       	sei
			timer1_start();
 286:	0e 94 9e 00 	call	0x13c	; 0x13c <timer1_start>
			sec = 30;
 28a:	8e e1       	ldi	r24, 0x1E	; 30
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <sec+0x1>
 292:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sec>
			PORTD = 0xFF; // Set PD (LEDs are off)
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	8b b9       	out	0x0b, r24	; 11
			startup = false;
 29a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <startup>
			game = true;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <game>
}

void start_up(){
	startup = true;
	int rand_seed = 0;
	while(startup){
 2a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <startup>
 2a8:	81 11       	cpse	r24, r1
 2aa:	d7 cf       	rjmp	.-82     	; 0x25a <start_up+0x10>
			PORTD = 0xFF; // Set PD (LEDs are off)
			startup = false;
			game = true;
		}
	}
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <gameplay>:

void gameplay(){
    while (game) {
 2b2:	41 c0       	rjmp	.+130    	; 0x336 <gameplay+0x84>
		if((~PINA & (1<<led)) && (led != -1)){			// If correct button is pressed, score += 1
 2b4:	80 b1       	in	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	80 95       	com	r24
 2ba:	90 95       	com	r25
 2bc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <led>
 2c0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <led+0x1>
 2c4:	02 2e       	mov	r0, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <gameplay+0x1a>
 2c8:	95 95       	asr	r25
 2ca:	87 95       	ror	r24
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <gameplay+0x16>
 2d0:	80 ff       	sbrs	r24, 0
 2d2:	22 c0       	rjmp	.+68     	; 0x318 <gameplay+0x66>
 2d4:	2f 3f       	cpi	r18, 0xFF	; 255
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	38 07       	cpc	r19, r24
 2da:	f1 f0       	breq	.+60     	; 0x318 <gameplay+0x66>
			while(~PINA & (1<<led));
 2dc:	80 b1       	in	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	80 95       	com	r24
 2e2:	90 95       	com	r25
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <gameplay+0x3a>
 2e8:	95 95       	asr	r25
 2ea:	87 95       	ror	r24
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <gameplay+0x36>
 2f0:	80 fd       	sbrc	r24, 0
 2f2:	f4 cf       	rjmp	.-24     	; 0x2dc <gameplay+0x2a>
			score += 1;
 2f4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <score>
 2f8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <score+0x1>
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <score+0x1>
 302:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <score>
			led = -1; // Prevent further scoring until new LED starts
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	9f ef       	ldi	r25, 0xFF	; 255
 30a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <led+0x1>
 30e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <led>
			PORTD = 0xFF; // Set PD (LEDs are off)
 312:	8b b9       	out	0x0b, r24	; 11
			sound();
 314:	0e 94 b5 00 	call	0x16a	; 0x16a <sound>
		}
		
	    if(sec <= 0){	// After 30 Seconds, game is finished
 318:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sec>
 31c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sec+0x1>
 320:	18 16       	cp	r1, r24
 322:	19 06       	cpc	r1, r25
 324:	44 f0       	brlt	.+16     	; 0x336 <gameplay+0x84>
		    PORTD = 0x00;	// Clear PD (LEDs are on)
 326:	1b b8       	out	0x0b, r1	; 11
		    sound();
 328:	0e 94 b5 00 	call	0x16a	; 0x16a <sound>
		    game = false;
 32c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <game>
			gameover = true;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}
	}
}

void gameplay(){
    while (game) {
 336:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <game>
 33a:	81 11       	cpse	r24, r1
 33c:	bb cf       	rjmp	.-138    	; 0x2b4 <gameplay+0x2>
		    sound();
		    game = false;
			gameover = true;
	    }
    }
}
 33e:	08 95       	ret

00000340 <game_over>:

void game_over(){
	timer1_stop();
 340:	0e 94 a4 00 	call	0x148	; 0x148 <timer1_stop>
	PORTD = score ^ 0xFF; // Display score
 344:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <score>
 348:	80 95       	com	r24
 34a:	8b b9       	out	0x0b, r24	; 11
	score = 0;
 34c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <score+0x1>
 350:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <score>
	led = 0; // Reset LED to default value
 354:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <led+0x1>
 358:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <led>
 35c:	08 95       	ret

0000035e <main>:
}

int main(void) {
	DDRA = 0x00; // Configure all PA bits to receive input from buttons
 35e:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Enable pull-up for PA
 360:	9f ef       	ldi	r25, 0xFF	; 255
 362:	92 b9       	out	0x02, r25	; 2
	
	DDRE |= 0b00010000; // Set PE4 to send output to speaker
 364:	8d b1       	in	r24, 0x0d	; 13
 366:	80 61       	ori	r24, 0x10	; 16
 368:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11101111; // Clear PE4
 36a:	8e b1       	in	r24, 0x0e	; 14
 36c:	8f 7e       	andi	r24, 0xEF	; 239
 36e:	8e b9       	out	0x0e, r24	; 14
	
	DDRD = 0xFF; // Configure all PD bits to send output to LED's
 370:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x00; // Clear PD (LEDs are on)
 372:	1b b8       	out	0x0b, r1	; 11
	
	timer_init_ctc();
 374:	0e 94 85 00 	call	0x10a	; 0x10a <timer_init_ctc>
	
	while(1){
		start_up();
 378:	0e 94 25 01 	call	0x24a	; 0x24a <start_up>
		gameplay();
 37c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <gameplay>
		game_over();
 380:	0e 94 a0 01 	call	0x340	; 0x340 <game_over>
 384:	f9 cf       	rjmp	.-14     	; 0x378 <main+0x1a>

00000386 <__divmodhi4>:
 386:	97 fb       	bst	r25, 7
 388:	07 2e       	mov	r0, r23
 38a:	16 f4       	brtc	.+4      	; 0x390 <__divmodhi4+0xa>
 38c:	00 94       	com	r0
 38e:	07 d0       	rcall	.+14     	; 0x39e <__divmodhi4_neg1>
 390:	77 fd       	sbrc	r23, 7
 392:	09 d0       	rcall	.+18     	; 0x3a6 <__divmodhi4_neg2>
 394:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__udivmodhi4>
 398:	07 fc       	sbrc	r0, 7
 39a:	05 d0       	rcall	.+10     	; 0x3a6 <__divmodhi4_neg2>
 39c:	3e f4       	brtc	.+14     	; 0x3ac <__divmodhi4_exit>

0000039e <__divmodhi4_neg1>:
 39e:	90 95       	com	r25
 3a0:	81 95       	neg	r24
 3a2:	9f 4f       	sbci	r25, 0xFF	; 255
 3a4:	08 95       	ret

000003a6 <__divmodhi4_neg2>:
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255

000003ac <__divmodhi4_exit>:
 3ac:	08 95       	ret

000003ae <__divmodsi4>:
 3ae:	05 2e       	mov	r0, r21
 3b0:	97 fb       	bst	r25, 7
 3b2:	1e f4       	brtc	.+6      	; 0x3ba <__divmodsi4+0xc>
 3b4:	00 94       	com	r0
 3b6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__negsi2>
 3ba:	57 fd       	sbrc	r21, 7
 3bc:	07 d0       	rcall	.+14     	; 0x3cc <__divmodsi4_neg2>
 3be:	0e 94 0a 02 	call	0x414	; 0x414 <__udivmodsi4>
 3c2:	07 fc       	sbrc	r0, 7
 3c4:	03 d0       	rcall	.+6      	; 0x3cc <__divmodsi4_neg2>
 3c6:	4e f4       	brtc	.+18     	; 0x3da <__divmodsi4_exit>
 3c8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__negsi2>

000003cc <__divmodsi4_neg2>:
 3cc:	50 95       	com	r21
 3ce:	40 95       	com	r20
 3d0:	30 95       	com	r19
 3d2:	21 95       	neg	r18
 3d4:	3f 4f       	sbci	r19, 0xFF	; 255
 3d6:	4f 4f       	sbci	r20, 0xFF	; 255
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255

000003da <__divmodsi4_exit>:
 3da:	08 95       	ret

000003dc <__negsi2>:
 3dc:	90 95       	com	r25
 3de:	80 95       	com	r24
 3e0:	70 95       	com	r23
 3e2:	61 95       	neg	r22
 3e4:	7f 4f       	sbci	r23, 0xFF	; 255
 3e6:	8f 4f       	sbci	r24, 0xFF	; 255
 3e8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ea:	08 95       	ret

000003ec <__udivmodhi4>:
 3ec:	aa 1b       	sub	r26, r26
 3ee:	bb 1b       	sub	r27, r27
 3f0:	51 e1       	ldi	r21, 0x11	; 17
 3f2:	07 c0       	rjmp	.+14     	; 0x402 <__udivmodhi4_ep>

000003f4 <__udivmodhi4_loop>:
 3f4:	aa 1f       	adc	r26, r26
 3f6:	bb 1f       	adc	r27, r27
 3f8:	a6 17       	cp	r26, r22
 3fa:	b7 07       	cpc	r27, r23
 3fc:	10 f0       	brcs	.+4      	; 0x402 <__udivmodhi4_ep>
 3fe:	a6 1b       	sub	r26, r22
 400:	b7 0b       	sbc	r27, r23

00000402 <__udivmodhi4_ep>:
 402:	88 1f       	adc	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	5a 95       	dec	r21
 408:	a9 f7       	brne	.-22     	; 0x3f4 <__udivmodhi4_loop>
 40a:	80 95       	com	r24
 40c:	90 95       	com	r25
 40e:	bc 01       	movw	r22, r24
 410:	cd 01       	movw	r24, r26
 412:	08 95       	ret

00000414 <__udivmodsi4>:
 414:	a1 e2       	ldi	r26, 0x21	; 33
 416:	1a 2e       	mov	r1, r26
 418:	aa 1b       	sub	r26, r26
 41a:	bb 1b       	sub	r27, r27
 41c:	fd 01       	movw	r30, r26
 41e:	0d c0       	rjmp	.+26     	; 0x43a <__udivmodsi4_ep>

00000420 <__udivmodsi4_loop>:
 420:	aa 1f       	adc	r26, r26
 422:	bb 1f       	adc	r27, r27
 424:	ee 1f       	adc	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	a2 17       	cp	r26, r18
 42a:	b3 07       	cpc	r27, r19
 42c:	e4 07       	cpc	r30, r20
 42e:	f5 07       	cpc	r31, r21
 430:	20 f0       	brcs	.+8      	; 0x43a <__udivmodsi4_ep>
 432:	a2 1b       	sub	r26, r18
 434:	b3 0b       	sbc	r27, r19
 436:	e4 0b       	sbc	r30, r20
 438:	f5 0b       	sbc	r31, r21

0000043a <__udivmodsi4_ep>:
 43a:	66 1f       	adc	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	88 1f       	adc	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	1a 94       	dec	r1
 444:	69 f7       	brne	.-38     	; 0x420 <__udivmodsi4_loop>
 446:	60 95       	com	r22
 448:	70 95       	com	r23
 44a:	80 95       	com	r24
 44c:	90 95       	com	r25
 44e:	9b 01       	movw	r18, r22
 450:	ac 01       	movw	r20, r24
 452:	bd 01       	movw	r22, r26
 454:	cf 01       	movw	r24, r30
 456:	08 95       	ret

00000458 <do_rand>:
 458:	8f 92       	push	r8
 45a:	9f 92       	push	r9
 45c:	af 92       	push	r10
 45e:	bf 92       	push	r11
 460:	cf 92       	push	r12
 462:	df 92       	push	r13
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	ec 01       	movw	r28, r24
 46e:	68 81       	ld	r22, Y
 470:	79 81       	ldd	r23, Y+1	; 0x01
 472:	8a 81       	ldd	r24, Y+2	; 0x02
 474:	9b 81       	ldd	r25, Y+3	; 0x03
 476:	61 15       	cp	r22, r1
 478:	71 05       	cpc	r23, r1
 47a:	81 05       	cpc	r24, r1
 47c:	91 05       	cpc	r25, r1
 47e:	21 f4       	brne	.+8      	; 0x488 <do_rand+0x30>
 480:	64 e2       	ldi	r22, 0x24	; 36
 482:	79 ed       	ldi	r23, 0xD9	; 217
 484:	8b e5       	ldi	r24, 0x5B	; 91
 486:	97 e0       	ldi	r25, 0x07	; 7
 488:	2d e1       	ldi	r18, 0x1D	; 29
 48a:	33 ef       	ldi	r19, 0xF3	; 243
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodsi4>
 494:	49 01       	movw	r8, r18
 496:	5a 01       	movw	r10, r20
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	a7 ea       	ldi	r26, 0xA7	; 167
 49e:	b1 e4       	ldi	r27, 0x41	; 65
 4a0:	0e 94 88 02 	call	0x510	; 0x510 <__muluhisi3>
 4a4:	6b 01       	movw	r12, r22
 4a6:	7c 01       	movw	r14, r24
 4a8:	ac ee       	ldi	r26, 0xEC	; 236
 4aa:	b4 ef       	ldi	r27, 0xF4	; 244
 4ac:	a5 01       	movw	r20, r10
 4ae:	94 01       	movw	r18, r8
 4b0:	0e 94 96 02 	call	0x52c	; 0x52c <__mulohisi3>
 4b4:	dc 01       	movw	r26, r24
 4b6:	cb 01       	movw	r24, r22
 4b8:	8c 0d       	add	r24, r12
 4ba:	9d 1d       	adc	r25, r13
 4bc:	ae 1d       	adc	r26, r14
 4be:	bf 1d       	adc	r27, r15
 4c0:	b7 ff       	sbrs	r27, 7
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <do_rand+0x72>
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	a1 09       	sbc	r26, r1
 4c8:	b0 48       	sbci	r27, 0x80	; 128
 4ca:	88 83       	st	Y, r24
 4cc:	99 83       	std	Y+1, r25	; 0x01
 4ce:	aa 83       	std	Y+2, r26	; 0x02
 4d0:	bb 83       	std	Y+3, r27	; 0x03
 4d2:	9f 77       	andi	r25, 0x7F	; 127
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	ff 90       	pop	r15
 4da:	ef 90       	pop	r14
 4dc:	df 90       	pop	r13
 4de:	cf 90       	pop	r12
 4e0:	bf 90       	pop	r11
 4e2:	af 90       	pop	r10
 4e4:	9f 90       	pop	r9
 4e6:	8f 90       	pop	r8
 4e8:	08 95       	ret

000004ea <rand_r>:
 4ea:	0e 94 2c 02 	call	0x458	; 0x458 <do_rand>
 4ee:	08 95       	ret

000004f0 <rand>:
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	0e 94 2c 02 	call	0x458	; 0x458 <do_rand>
 4f8:	08 95       	ret

000004fa <srand>:
 4fa:	a0 e0       	ldi	r26, 0x00	; 0
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 502:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 506:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 50a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 50e:	08 95       	ret

00000510 <__muluhisi3>:
 510:	0e 94 9b 02 	call	0x536	; 0x536 <__umulhisi3>
 514:	a5 9f       	mul	r26, r21
 516:	90 0d       	add	r25, r0
 518:	b4 9f       	mul	r27, r20
 51a:	90 0d       	add	r25, r0
 51c:	a4 9f       	mul	r26, r20
 51e:	80 0d       	add	r24, r0
 520:	91 1d       	adc	r25, r1
 522:	11 24       	eor	r1, r1
 524:	08 95       	ret

00000526 <__mulshisi3>:
 526:	b7 ff       	sbrs	r27, 7
 528:	0c 94 88 02 	jmp	0x510	; 0x510 <__muluhisi3>

0000052c <__mulohisi3>:
 52c:	0e 94 88 02 	call	0x510	; 0x510 <__muluhisi3>
 530:	82 1b       	sub	r24, r18
 532:	93 0b       	sbc	r25, r19
 534:	08 95       	ret

00000536 <__umulhisi3>:
 536:	a2 9f       	mul	r26, r18
 538:	b0 01       	movw	r22, r0
 53a:	b3 9f       	mul	r27, r19
 53c:	c0 01       	movw	r24, r0
 53e:	a3 9f       	mul	r26, r19
 540:	70 0d       	add	r23, r0
 542:	81 1d       	adc	r24, r1
 544:	11 24       	eor	r1, r1
 546:	91 1d       	adc	r25, r1
 548:	b2 9f       	mul	r27, r18
 54a:	70 0d       	add	r23, r0
 54c:	81 1d       	adc	r24, r1
 54e:	11 24       	eor	r1, r1
 550:	91 1d       	adc	r25, r1
 552:	08 95       	ret

00000554 <_exit>:
 554:	f8 94       	cli

00000556 <__stop_program>:
 556:	ff cf       	rjmp	.-2      	; 0x556 <__stop_program>
