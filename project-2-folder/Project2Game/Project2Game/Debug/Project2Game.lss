
Project2Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000049c  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800106  00800106  00000536  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dae  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa8  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ac  00000000  00000000  00001e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060f  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000252  00000000  00000000  00002b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ec e9       	ldi	r30, 0x9C	; 156
  e0:	f4 e0       	ldi	r31, 0x04	; 4
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 30       	cpi	r26, 0x06	; 6
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a6 e0       	ldi	r26, 0x06	; 6
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ae 30       	cpi	r26, 0x0E	; 14
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
 102:	0c 94 4c 02 	jmp	0x498	; 0x498 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <timer_init_ctc>:
	bool current_button_pressed = !((current_E_buttons_pressed >> button_index) & 0b00000001); // Set to true if pressed, false if not pressed
	if(previous_button_pressed && !current_button_pressed){ // SW5
		sound();
	}
	previous_E_buttons_pressed = current_E_buttons_pressed;
}
 10a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 61       	ori	r24, 0x18	; 24
 116:	80 83       	st	Z, r24
 118:	e4 e8       	ldi	r30, 0x84	; 132
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	91 81       	ldd	r25, Z+1	; 0x01
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24
 124:	ef e6       	ldi	r30, 0x6F	; 111
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
 12e:	84 e2       	ldi	r24, 0x24	; 36
 130:	94 ef       	ldi	r25, 0xF4	; 244
 132:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 136:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 13a:	08 95       	ret

0000013c <timer1_start>:
 13c:	e1 e8       	ldi	r30, 0x81	; 129
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <timer1_stop>:
 148:	e1 e8       	ldi	r30, 0x81	; 129
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 7f       	andi	r24, 0xF8	; 248
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <sound_delay>:
 154:	82 e8       	ldi	r24, 0x82	; 130
 156:	86 bd       	out	0x26, r24	; 38
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	85 bd       	out	0x25, r24	; 37
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	88 23       	and	r24, r24
 160:	e9 f3       	breq	.-6      	; 0x15c <sound_delay+0x8>
 162:	15 bc       	out	0x25, r1	; 37
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	85 bb       	out	0x15, r24	; 21
 168:	08 95       	ret

0000016a <sound>:
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	c0 e0       	ldi	r28, 0x00	; 0
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	07 c0       	rjmp	.+14     	; 0x182 <sound+0x18>
 174:	9e b1       	in	r25, 0x0e	; 14
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	89 27       	eor	r24, r25
 17a:	8e b9       	out	0x0e, r24	; 14
 17c:	0e 94 aa 00 	call	0x154	; 0x154 <sound_delay>
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	c0 39       	cpi	r28, 0x90	; 144
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	d8 07       	cpc	r29, r24
 188:	ac f3       	brlt	.-22     	; 0x174 <sound+0xa>
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <randomLED>:
 190:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <rand>
 194:	87 70       	andi	r24, 0x07	; 7
 196:	90 78       	andi	r25, 0x80	; 128
 198:	99 23       	and	r25, r25
 19a:	24 f4       	brge	.+8      	; 0x1a4 <randomLED+0x14>
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	88 6f       	ori	r24, 0xF8	; 248
 1a0:	9f 6f       	ori	r25, 0xFF	; 255
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	08 95       	ret

000001a6 <__vector_13>:
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
 1c8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1cc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <game>
 1d8:	88 23       	and	r24, r24
 1da:	d9 f0       	breq	.+54     	; 0x212 <__vector_13+0x6c>
 1dc:	0e 94 c8 00 	call	0x190	; 0x190 <randomLED>
 1e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <led>
 1e4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <led+0x1>
 1e8:	5b b1       	in	r21, 0x0b	; 11
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__vector_13+0x50>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <__vector_13+0x4c>
 1fa:	cb 01       	movw	r24, r22
 1fc:	85 27       	eor	r24, r21
 1fe:	8b b9       	out	0x0b, r24	; 11
 200:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sec>
 204:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sec+0x1>
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <sec+0x1>
 20e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sec>
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <start_up>:

void start_up(){
	while(startup){
 234:	14 c0       	rjmp	.+40     	; 0x25e <start_up+0x2a>
		if(~PINA & (1<<PINA0)){			// If SW1 is pressed, start the game
 236:	00 99       	sbic	0x00, 0	; 0
 238:	12 c0       	rjmp	.+36     	; 0x25e <start_up+0x2a>
			while(~PINA & (1<<PINA0));
 23a:	00 9b       	sbis	0x00, 0	; 0
 23c:	fe cf       	rjmp	.-4      	; 0x23a <start_up+0x6>
			sei();
 23e:	78 94       	sei
			timer1_start();
 240:	0e 94 9e 00 	call	0x13c	; 0x13c <timer1_start>
			sec = 30;
 244:	8e e1       	ldi	r24, 0x1E	; 30
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <sec+0x1>
 24c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sec>
			PORTD = 0xFF; // Set PD (LEDs are off)
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	8b b9       	out	0x0b, r24	; 11
			startup = false;
 254:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <startup>
			game = true;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <game>
	}
	previous_E_buttons_pressed = current_E_buttons_pressed;
}

void start_up(){
	while(startup){
 25e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <startup>
 262:	81 11       	cpse	r24, r1
 264:	e8 cf       	rjmp	.-48     	; 0x236 <start_up+0x2>
			PORTD = 0xFF; // Set PD (LEDs are off)
			startup = false;
			game = true;
		}
	}
}
 266:	08 95       	ret

00000268 <gameplay>:

void gameplay(){
    while (game) {
 268:	35 c0       	rjmp	.+106    	; 0x2d4 <gameplay+0x6c>
		if(~PINA & (1<<led)){			// If correct button is pressed, score += 1
 26a:	80 b1       	in	r24, 0x00	; 0
 26c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <led>
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	80 95       	com	r24
 274:	90 95       	com	r25
 276:	02 2e       	mov	r0, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <gameplay+0x16>
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <gameplay+0x12>
 282:	80 ff       	sbrs	r24, 0
 284:	19 c0       	rjmp	.+50     	; 0x2b8 <gameplay+0x50>
			while(~PINA & (1<<led));
 286:	80 b1       	in	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	80 95       	com	r24
 28c:	90 95       	com	r25
 28e:	02 2e       	mov	r0, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <gameplay+0x2e>
 292:	95 95       	asr	r25
 294:	87 95       	ror	r24
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <gameplay+0x2a>
 29a:	80 fd       	sbrc	r24, 0
 29c:	f4 cf       	rjmp	.-24     	; 0x286 <gameplay+0x1e>
			score += 1;
 29e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <score>
 2a2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <score+0x1>
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <score+0x1>
 2ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <score>
			PORTD = 0xFF; // Set PD (LEDs are off)
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	8b b9       	out	0x0b, r24	; 11
			sound();
 2b4:	0e 94 b5 00 	call	0x16a	; 0x16a <sound>
		}
		
	    if(sec == 0){	// After 30 Seconds, game is finished
 2b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sec>
 2bc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sec+0x1>
 2c0:	89 2b       	or	r24, r25
 2c2:	41 f4       	brne	.+16     	; 0x2d4 <gameplay+0x6c>
		    PORTD = 0x00;	// Clear PD (LEDs are on)
 2c4:	1b b8       	out	0x0b, r1	; 11
		    sound();
 2c6:	0e 94 b5 00 	call	0x16a	; 0x16a <sound>
		    game = false;
 2ca:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <game>
			gameover = true;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}
	}
}

void gameplay(){
    while (game) {
 2d4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <game>
 2d8:	81 11       	cpse	r24, r1
 2da:	c7 cf       	rjmp	.-114    	; 0x26a <gameplay+0x2>
		    sound();
		    game = false;
			gameover = true;
	    }
    }
}
 2dc:	08 95       	ret

000002de <game_over>:

void game_over(){
	while (gameover){
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <game_over+0x6>
		
		timer1_stop();
 2e0:	0e 94 a4 00 	call	0x148	; 0x148 <timer1_stop>
	    }
    }
}

void game_over(){
	while (gameover){
 2e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2e8:	81 11       	cpse	r24, r1
 2ea:	fa cf       	rjmp	.-12     	; 0x2e0 <game_over+0x2>
		///////////////////
		// Display Score //
		///////////////////
		
	}
}
 2ec:	08 95       	ret

000002ee <main>:

int main(void) {
	DDRA = 0x00; // Configure all PA bits to receive input from buttons
 2ee:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Enable pull-up for PA
 2f0:	9f ef       	ldi	r25, 0xFF	; 255
 2f2:	92 b9       	out	0x02, r25	; 2
	
	DDRE |= 0b00010000; // Set PE4 to send output to speaker
 2f4:	8d b1       	in	r24, 0x0d	; 13
 2f6:	80 61       	ori	r24, 0x10	; 16
 2f8:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11101111; // Clear PE4
 2fa:	8e b1       	in	r24, 0x0e	; 14
 2fc:	8f 7e       	andi	r24, 0xEF	; 239
 2fe:	8e b9       	out	0x0e, r24	; 14
	
	DDRD = 0xFF; // Configure all PD bits to send output to LED's
 300:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x00; // Clear PD (LEDs are on)
 302:	1b b8       	out	0x0b, r1	; 11
	
	timer_init_ctc();
 304:	0e 94 85 00 	call	0x10a	; 0x10a <timer_init_ctc>
	
	start_up();
 308:	0e 94 1a 01 	call	0x234	; 0x234 <start_up>
	gameplay();
 30c:	0e 94 34 01 	call	0x268	; 0x268 <gameplay>
	game_over();
 310:	0e 94 6f 01 	call	0x2de	; 0x2de <game_over>

	return 0;
}
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	08 95       	ret

0000031a <do_rand>:
 31a:	8f 92       	push	r8
 31c:	9f 92       	push	r9
 31e:	af 92       	push	r10
 320:	bf 92       	push	r11
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	ec 01       	movw	r28, r24
 330:	68 81       	ld	r22, Y
 332:	79 81       	ldd	r23, Y+1	; 0x01
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	9b 81       	ldd	r25, Y+3	; 0x03
 338:	61 15       	cp	r22, r1
 33a:	71 05       	cpc	r23, r1
 33c:	81 05       	cpc	r24, r1
 33e:	91 05       	cpc	r25, r1
 340:	21 f4       	brne	.+8      	; 0x34a <do_rand+0x30>
 342:	64 e2       	ldi	r22, 0x24	; 36
 344:	79 ed       	ldi	r23, 0xD9	; 217
 346:	8b e5       	ldi	r24, 0x5B	; 91
 348:	97 e0       	ldi	r25, 0x07	; 7
 34a:	2d e1       	ldi	r18, 0x1D	; 29
 34c:	33 ef       	ldi	r19, 0xF3	; 243
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__divmodsi4>
 356:	49 01       	movw	r8, r18
 358:	5a 01       	movw	r10, r20
 35a:	9b 01       	movw	r18, r22
 35c:	ac 01       	movw	r20, r24
 35e:	a7 ea       	ldi	r26, 0xA7	; 167
 360:	b1 e4       	ldi	r27, 0x41	; 65
 362:	0e 94 08 02 	call	0x410	; 0x410 <__muluhisi3>
 366:	6b 01       	movw	r12, r22
 368:	7c 01       	movw	r14, r24
 36a:	ac ee       	ldi	r26, 0xEC	; 236
 36c:	b4 ef       	ldi	r27, 0xF4	; 244
 36e:	a5 01       	movw	r20, r10
 370:	94 01       	movw	r18, r8
 372:	0e 94 16 02 	call	0x42c	; 0x42c <__mulohisi3>
 376:	dc 01       	movw	r26, r24
 378:	cb 01       	movw	r24, r22
 37a:	8c 0d       	add	r24, r12
 37c:	9d 1d       	adc	r25, r13
 37e:	ae 1d       	adc	r26, r14
 380:	bf 1d       	adc	r27, r15
 382:	b7 ff       	sbrs	r27, 7
 384:	03 c0       	rjmp	.+6      	; 0x38c <do_rand+0x72>
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	a1 09       	sbc	r26, r1
 38a:	b0 48       	sbci	r27, 0x80	; 128
 38c:	88 83       	st	Y, r24
 38e:	99 83       	std	Y+1, r25	; 0x01
 390:	aa 83       	std	Y+2, r26	; 0x02
 392:	bb 83       	std	Y+3, r27	; 0x03
 394:	9f 77       	andi	r25, 0x7F	; 127
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	bf 90       	pop	r11
 3a4:	af 90       	pop	r10
 3a6:	9f 90       	pop	r9
 3a8:	8f 90       	pop	r8
 3aa:	08 95       	ret

000003ac <rand_r>:
 3ac:	0e 94 8d 01 	call	0x31a	; 0x31a <do_rand>
 3b0:	08 95       	ret

000003b2 <rand>:
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 8d 01 	call	0x31a	; 0x31a <do_rand>
 3ba:	08 95       	ret

000003bc <srand>:
 3bc:	a0 e0       	ldi	r26, 0x00	; 0
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3c8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3cc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3d0:	08 95       	ret

000003d2 <__divmodsi4>:
 3d2:	05 2e       	mov	r0, r21
 3d4:	97 fb       	bst	r25, 7
 3d6:	1e f4       	brtc	.+6      	; 0x3de <__divmodsi4+0xc>
 3d8:	00 94       	com	r0
 3da:	0e 94 00 02 	call	0x400	; 0x400 <__negsi2>
 3de:	57 fd       	sbrc	r21, 7
 3e0:	07 d0       	rcall	.+14     	; 0x3f0 <__divmodsi4_neg2>
 3e2:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodsi4>
 3e6:	07 fc       	sbrc	r0, 7
 3e8:	03 d0       	rcall	.+6      	; 0x3f0 <__divmodsi4_neg2>
 3ea:	4e f4       	brtc	.+18     	; 0x3fe <__divmodsi4_exit>
 3ec:	0c 94 00 02 	jmp	0x400	; 0x400 <__negsi2>

000003f0 <__divmodsi4_neg2>:
 3f0:	50 95       	com	r21
 3f2:	40 95       	com	r20
 3f4:	30 95       	com	r19
 3f6:	21 95       	neg	r18
 3f8:	3f 4f       	sbci	r19, 0xFF	; 255
 3fa:	4f 4f       	sbci	r20, 0xFF	; 255
 3fc:	5f 4f       	sbci	r21, 0xFF	; 255

000003fe <__divmodsi4_exit>:
 3fe:	08 95       	ret

00000400 <__negsi2>:
 400:	90 95       	com	r25
 402:	80 95       	com	r24
 404:	70 95       	com	r23
 406:	61 95       	neg	r22
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	8f 4f       	sbci	r24, 0xFF	; 255
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__muluhisi3>:
 410:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 414:	a5 9f       	mul	r26, r21
 416:	90 0d       	add	r25, r0
 418:	b4 9f       	mul	r27, r20
 41a:	90 0d       	add	r25, r0
 41c:	a4 9f       	mul	r26, r20
 41e:	80 0d       	add	r24, r0
 420:	91 1d       	adc	r25, r1
 422:	11 24       	eor	r1, r1
 424:	08 95       	ret

00000426 <__mulshisi3>:
 426:	b7 ff       	sbrs	r27, 7
 428:	0c 94 08 02 	jmp	0x410	; 0x410 <__muluhisi3>

0000042c <__mulohisi3>:
 42c:	0e 94 08 02 	call	0x410	; 0x410 <__muluhisi3>
 430:	82 1b       	sub	r24, r18
 432:	93 0b       	sbc	r25, r19
 434:	08 95       	ret

00000436 <__udivmodsi4>:
 436:	a1 e2       	ldi	r26, 0x21	; 33
 438:	1a 2e       	mov	r1, r26
 43a:	aa 1b       	sub	r26, r26
 43c:	bb 1b       	sub	r27, r27
 43e:	fd 01       	movw	r30, r26
 440:	0d c0       	rjmp	.+26     	; 0x45c <__udivmodsi4_ep>

00000442 <__udivmodsi4_loop>:
 442:	aa 1f       	adc	r26, r26
 444:	bb 1f       	adc	r27, r27
 446:	ee 1f       	adc	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	a2 17       	cp	r26, r18
 44c:	b3 07       	cpc	r27, r19
 44e:	e4 07       	cpc	r30, r20
 450:	f5 07       	cpc	r31, r21
 452:	20 f0       	brcs	.+8      	; 0x45c <__udivmodsi4_ep>
 454:	a2 1b       	sub	r26, r18
 456:	b3 0b       	sbc	r27, r19
 458:	e4 0b       	sbc	r30, r20
 45a:	f5 0b       	sbc	r31, r21

0000045c <__udivmodsi4_ep>:
 45c:	66 1f       	adc	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	88 1f       	adc	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	1a 94       	dec	r1
 466:	69 f7       	brne	.-38     	; 0x442 <__udivmodsi4_loop>
 468:	60 95       	com	r22
 46a:	70 95       	com	r23
 46c:	80 95       	com	r24
 46e:	90 95       	com	r25
 470:	9b 01       	movw	r18, r22
 472:	ac 01       	movw	r20, r24
 474:	bd 01       	movw	r22, r26
 476:	cf 01       	movw	r24, r30
 478:	08 95       	ret

0000047a <__umulhisi3>:
 47a:	a2 9f       	mul	r26, r18
 47c:	b0 01       	movw	r22, r0
 47e:	b3 9f       	mul	r27, r19
 480:	c0 01       	movw	r24, r0
 482:	a3 9f       	mul	r26, r19
 484:	70 0d       	add	r23, r0
 486:	81 1d       	adc	r24, r1
 488:	11 24       	eor	r1, r1
 48a:	91 1d       	adc	r25, r1
 48c:	b2 9f       	mul	r27, r18
 48e:	70 0d       	add	r23, r0
 490:	81 1d       	adc	r24, r1
 492:	11 24       	eor	r1, r1
 494:	91 1d       	adc	r25, r1
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
