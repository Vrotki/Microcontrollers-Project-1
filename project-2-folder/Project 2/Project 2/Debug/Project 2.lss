
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba7  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a24  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  00001887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b2  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  0000220a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  70:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  7c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  80:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  84:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  8c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  90:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  94:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  98:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  9c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  ac:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  bc:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a2 30       	cpi	r26, 0x02	; 2
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  ec:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <inc_count>:
		PORTD = count ^ 0xFF; // Output complement of counter to LED's
    }
}

void inc_count(){
	count += 1;
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	08 95       	ret

00000108 <dec_count>:
	button_delay();
	return;
}

void dec_count(){
	count -= 1;
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	08 95       	ret

0000011c <main>:

int count;

int main(void)
{
	count = 0;
 11c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	int previous_buttons_pressed = 0b11111111; // Set previous buttons to not pressed
	int current_buttons_pressed = 0b11111111; // Set current buttons to not pressed

	DDRA = 0x00; // Configure all PA bits to receive input from buttons
 124:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Enable pull-up for PA
 126:	9f ef       	ldi	r25, 0xFF	; 255
 128:	92 b9       	out	0x02, r25	; 2
	DDRE |= 0b00010000; // Set PE4 to send output to speaker
 12a:	8d b1       	in	r24, 0x0d	; 13
 12c:	80 61       	ori	r24, 0x10	; 16
 12e:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11101111; // Clear PE4
 130:	8e b1       	in	r24, 0x0e	; 14
 132:	8f 7e       	andi	r24, 0xEF	; 239
 134:	8e b9       	out	0x0e, r24	; 14
	DDRD = 0xFF; // Configure all PD bits to send output to LED's
 136:	9a b9       	out	0x0a, r25	; 10
int count;

int main(void)
{
	count = 0;
	int previous_buttons_pressed = 0b11111111; // Set previous buttons to not pressed
 138:	ee 24       	eor	r14, r14
 13a:	ea 94       	dec	r14
 13c:	f1 2c       	mov	r15, r1
	PORTE &= 0b11101111; // Clear PE4
	DDRD = 0xFF; // Configure all PD bits to send output to LED's

    while (1)
    {
		current_buttons_pressed = PINA; // Get current button pressed values
 13e:	00 b1       	in	r16, 0x00	; 0
 140:	10 e0       	ldi	r17, 0x00	; 0
		for(int button_index = 0; button_index < 8; button_index++){
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d0 e0       	ldi	r29, 0x00	; 0
 146:	21 c0       	rjmp	.+66     	; 0x18a <main+0x6e>
			bool previous_button_pressed = !((previous_buttons_pressed >> button_index) & 0b00000001); // Set to true if was pressed, false if was not pressed
			bool current_button_pressed = !((current_buttons_pressed >> button_index) & 0b00000001); // Set to true if pressed, false if not pressed
 148:	c8 01       	movw	r24, r16
 14a:	0c 2e       	mov	r0, r28
 14c:	02 c0       	rjmp	.+4      	; 0x152 <main+0x36>
 14e:	95 95       	asr	r25
 150:	87 95       	ror	r24
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <main+0x32>
 156:	9c 01       	movw	r18, r24
 158:	21 70       	andi	r18, 0x01	; 1
 15a:	33 27       	eor	r19, r19
			if(previous_button_pressed && !current_button_pressed){
 15c:	c7 01       	movw	r24, r14
 15e:	0c 2e       	mov	r0, r28
 160:	02 c0       	rjmp	.+4      	; 0x166 <main+0x4a>
 162:	95 95       	asr	r25
 164:	87 95       	ror	r24
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <main+0x46>
 16a:	80 fd       	sbrc	r24, 0
 16c:	0d c0       	rjmp	.+26     	; 0x188 <main+0x6c>
 16e:	23 2b       	or	r18, r19
 170:	59 f0       	breq	.+22     	; 0x188 <main+0x6c>
				switch(button_index){
 172:	20 97       	sbiw	r28, 0x00	; 0
 174:	21 f0       	breq	.+8      	; 0x17e <main+0x62>
 176:	c1 30       	cpi	r28, 0x01	; 1
 178:	d1 05       	cpc	r29, r1
 17a:	21 f0       	breq	.+8      	; 0x184 <main+0x68>
 17c:	05 c0       	rjmp	.+10     	; 0x188 <main+0x6c>
					case 0: 
						inc_count();
 17e:	0e 94 7a 00 	call	0xf4	; 0xf4 <inc_count>
						break;
 182:	02 c0       	rjmp	.+4      	; 0x188 <main+0x6c>
					case 1:
						dec_count();
 184:	0e 94 84 00 	call	0x108	; 0x108 <dec_count>
	DDRD = 0xFF; // Configure all PD bits to send output to LED's

    while (1)
    {
		current_buttons_pressed = PINA; // Get current button pressed values
		for(int button_index = 0; button_index < 8; button_index++){
 188:	21 96       	adiw	r28, 0x01	; 1
 18a:	c8 30       	cpi	r28, 0x08	; 8
 18c:	d1 05       	cpc	r29, r1
 18e:	e4 f2       	brlt	.-72     	; 0x148 <main+0x2c>
					// Add a new case statement corresponding with the button's input pin to implement any other buttons
				}
			}
		}
		previous_buttons_pressed = current_buttons_pressed;
		PORTD = count ^ 0xFF; // Output complement of counter to LED's
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	80 95       	com	r24
 196:	8b b9       	out	0x0b, r24	; 11
						break;
					// Add a new case statement corresponding with the button's input pin to implement any other buttons
				}
			}
		}
		previous_buttons_pressed = current_buttons_pressed;
 198:	78 01       	movw	r14, r16
		PORTD = count ^ 0xFF; // Output complement of counter to LED's
    }
 19a:	d1 cf       	rjmp	.-94     	; 0x13e <main+0x22>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
